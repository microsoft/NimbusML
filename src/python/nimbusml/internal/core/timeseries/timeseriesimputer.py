# --------------------------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License.
# --------------------------------------------------------------------------------------------
# - Generated by tools/entrypoint_compiler.py: do not edit by hand
"""
TimeSeriesImputer
"""

__all__ = ["TimeSeriesImputer"]


from ...entrypoints.transforms_timeseriesimputer import \
    transforms_timeseriesimputer
from ...utils.utils import trace
from ..base_pipeline_item import BasePipelineItem, DefaultSignature


class TimeSeriesImputer(BasePipelineItem, DefaultSignature):
    """
    **Description**
        Fills in missing row and values

    :param time_series_column: Column representing the time.

    :param grain_columns: List of grain columns.

    :param filter_columns: Columns to filter.

    :param filter_mode: Filter mode. Either include or exclude.

    :param impute_mode: Mode for imputing, defaults to ForwardFill if not
        provided.

    :param supress_type_errors: Suppress the errors that would occur if a
        column and impute mode are incompatible. If true, will skip the column.
        If false, will stop and throw an error.

    :param params: Additional arguments sent to compute engine.

    """

    @trace
    def __init__(
            self,
            time_series_column,
            grain_columns,
            filter_columns=None,
            filter_mode='Exclude',
            impute_mode='ForwardFill',
            supress_type_errors=False,
            **params):
        BasePipelineItem.__init__(
            self, type='transform', **params)

        self.time_series_column = time_series_column
        self.grain_columns = grain_columns
        self.filter_columns = filter_columns
        self.filter_mode = filter_mode
        self.impute_mode = impute_mode
        self.supress_type_errors = supress_type_errors

    @property
    def _entrypoint(self):
        return transforms_timeseriesimputer

    @trace
    def _get_node(self, **all_args):
        algo_args = dict(
            time_series_column=self.time_series_column,
            grain_columns=self.grain_columns,
            filter_columns=self.filter_columns,
            filter_mode=self.filter_mode,
            impute_mode=self.impute_mode,
            supress_type_errors=self.supress_type_errors)

        all_args.update(algo_args)
        return self._entrypoint(**all_args)
