# --------------------------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License.
# --------------------------------------------------------------------------------------------
# - Generated by tools/entrypoint_compiler.py: do not edit by hand
"""
RollingWindow
"""

__all__ = ["RollingWindow"]


from ...entrypoints.transforms_rollingwindow import transforms_rollingwindow
from ...utils.utils import trace
from ..base_pipeline_item import BasePipelineItem, DefaultSignature


class RollingWindow(BasePipelineItem, DefaultSignature):
    """
    **Description**
        Performs a calculation over a rolling timeseries window

    :param grain_columns: List of grain columns.

    :param horizon: Maximum horizon value.

    :param max_window_size: Maximum window size.

    :param min_window_size: Minimum window size.

    :param window_calculation: What window calculation to use.

    :param params: Additional arguments sent to compute engine.

    """

    @trace
    def __init__(
            self,
            grain_columns,
            horizon=0,
            max_window_size=0,
            min_window_size=1,
            window_calculation='0',
            **params):
        BasePipelineItem.__init__(
            self, type='transform', **params)

        self.grain_columns = grain_columns
        self.horizon = horizon
        self.max_window_size = max_window_size
        self.min_window_size = min_window_size
        self.window_calculation = window_calculation

    @property
    def _entrypoint(self):
        return transforms_rollingwindow

    @trace
    def _get_node(self, **all_args):

        input_columns = self.input
        if input_columns is None and 'input' in all_args:
            input_columns = all_args['input']
        if 'input' in all_args:
            all_args.pop('input')

        output_columns = self.output
        if output_columns is None and 'output' in all_args:
            output_columns = all_args['output']
        if 'output' in all_args:
            all_args.pop('output')

        # validate input
        if input_columns is None:
            raise ValueError(
                "'None' input passed when it cannot be none.")

        if not isinstance(input_columns, list):
            raise ValueError(
                "input has to be a list of strings, instead got %s" %
                type(input_columns))

        # validate output
        if output_columns is None:
            output_columns = input_columns

        if not isinstance(output_columns, list):
            raise ValueError(
                "output has to be a list of strings, instead got %s" %
                type(output_columns))

        algo_args = dict(
            column=[
                dict(
                    Source=i,
                    Name=o) for i,
                o in zip(
                    input_columns,
                    output_columns)] if input_columns else None,
            grain_columns=self.grain_columns,
            horizon=self.horizon,
            max_window_size=self.max_window_size,
            min_window_size=self.min_window_size,
            window_calculation=self.window_calculation)

        all_args.update(algo_args)
        return self._entrypoint(**all_args)
