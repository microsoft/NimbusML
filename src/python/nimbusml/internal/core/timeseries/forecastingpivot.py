# --------------------------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License.
# --------------------------------------------------------------------------------------------
# - Generated by tools/entrypoint_compiler.py: do not edit by hand
"""
ForecastingPivot
"""

__all__ = ["ForecastingPivot"]


from ...entrypoints.transforms_forecastingpivot import \
    transforms_forecastingpivot
from ...utils.utils import trace
from ..base_pipeline_item import BasePipelineItem, DefaultSignature


class ForecastingPivot(BasePipelineItem, DefaultSignature):
    """
    **Description**
        Pivots the input colums and drops any rows with N/A

    :param columns_to_pivot: List of columns to pivot.

    :param horizon_column_name: Name of the horizon column generated.

    :param params: Additional arguments sent to compute engine.

    """

    @trace
    def __init__(
            self,
            columns_to_pivot,
            horizon_column_name='Horizon',
            **params):
        BasePipelineItem.__init__(
            self, type='transform', **params)

        self.columns_to_pivot = columns_to_pivot
        self.horizon_column_name = horizon_column_name

    @property
    def _entrypoint(self):
        return transforms_forecastingpivot

    @trace
    def _get_node(self, **all_args):
        algo_args = dict(
            columns_to_pivot=self.columns_to_pivot,
            horizon_column_name=self.horizon_column_name)

        all_args.update(algo_args)
        return self._entrypoint(**all_args)
