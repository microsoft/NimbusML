# --------------------------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License.
# --------------------------------------------------------------------------------------------
# - Generated by tools/entrypoint_compiler.py: do not edit by hand
"""
SsaForecaster
"""

__all__ = ["SsaForecaster"]


from ...entrypoints.timeseriesprocessingentrypoints_ssaforecasting import \
    timeseriesprocessingentrypoints_ssaforecasting
from ...utils.utils import trace
from ..base_pipeline_item import BasePipelineItem, DefaultSignature


class SsaForecaster(BasePipelineItem, DefaultSignature):
    """
    **Description**
        This transform forecasts using Singular Spectrum Analysis (SSA).

    :param confidence: The confidence for spike detection in the range [0,
        100].

    :param window_size: Window size.

    :param series_length: Series length.

    :param train_size: Train size.

    :param discount_factor: The discount factor in [0, 1].

    :param is_adaptive: The flag determing whether the model is adaptive.

    :param params: Additional arguments sent to compute engine.

    """

    @trace
    def __init__(
            self,
            confidence=99.0,
            window_size=10,
            series_length=20,
            train_size=100,
            discount_factor=1.0,
            is_adaptive=False,
            **params):
        BasePipelineItem.__init__(
            self, type='transform', **params)

        self.confidence = confidence
        self.window_size = window_size
        self.series_length = series_length
        self.train_size = train_size
        self.discount_factor = discount_factor
        self.is_adaptive = is_adaptive

    @property
    def _entrypoint(self):
        return timeseriesprocessingentrypoints_ssaforecasting

    @trace
    def _get_node(self, **all_args):
        algo_args = dict(
            source=self.source,
            name=self._name_or_source,
            confidence=self.confidence,
            window_size=self.window_size,
            series_length=self.series_length,
            train_size=self.train_size,
            discount_factor=self.discount_factor,
            is_adaptive=self.is_adaptive)

        all_args.update(algo_args)
        return self._entrypoint(**all_args)
