# --------------------------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License.
# --------------------------------------------------------------------------------------------
# - Generated by tools/entrypoint_compiler.py: do not edit by hand
"""
SsaForecaster
"""

__all__ = ["SsaForecaster"]


from ...entrypoints.timeseriesprocessingentrypoints_ssaforecasting import \
    timeseriesprocessingentrypoints_ssaforecasting
from ...utils.utils import trace
from ..base_pipeline_item import BasePipelineItem, DefaultSignature


class SsaForecaster(BasePipelineItem, DefaultSignature):
    """
    This transform forecasts using Singular Spectrum Analysis (SSA).

    .. remarks::

        This class implements the transform based on `Singular Spectrum Analysis
        <https://en.wikipedia.org/wiki/Singular_spectrum_analysis>`_ (SSA).
        SSA is a powerful framework for decomposing the time-series into trend,
        seasonality and noise components as well as forecasting the future values
        of the time-series. In principle, SSA performs spectral analysis on the
        input time-series where each component in the spectrum corresponds to a
        trend, seasonal or noise component in the time-series. For details of the
        Singular Spectrum Analysis (SSA), refer to `this document
        <http://arxiv.org/pdf/1206.6910.pdf>`_.

    :param window_size: The length of the window on the series for building the
        trajectory matrix (parameter L).

    :param series_length: The length of series that is kept in buffer for
        modeling (parameter N).

    :param train_size: The length of series from the begining used for
        training.

    :param horizon: The number of values to forecast.

    :param confidence_level: The confidence level in [0, 1) for forecasting.

    :param variable_horizon: Set this to true horizon will change at prediction
        time.

    :param confidence_lower_bound_column: The name of the confidence interval
        lower bound column.

    :param confidence_upper_bound_column: The name of the confidence interval
        upper bound column.

    :param rank_selection_method: The rank selection method.

    :param rank: The desired rank of the subspace used for SSA projection
        (parameter r). This parameter should be in the range in [1,
        windowSize]. If set to null, the rank is automatically determined based
        on prediction error minimization.

    :param max_rank: The maximum rank considered during the rank selection
        process. If not provided (i.e. set to null), it is set to windowSize -
        1.

    :param should_stabilize: The flag determining whether the model should be
        stabilized.

    :param should_maintain_info: The flag determining whether the meta
        information for the model needs to be maintained.

    :param max_growth: The maximum growth on the exponential trend.

    :param discount_factor: The discount factor in [0,1] used for online
        updates.

    :param is_adaptive: The flag determing whether the model is adaptive.

    :param params: Additional arguments sent to compute engine.

    .. seealso::
        :py:func:`IIDChangePointDetector
        <nimbusml.preprocessing.timeseries.IIDChangePointDetector>`,
        :py:func:`IIDSpikeDetector
        <nimbusml.preprocessing.timeseries.IIDSpikeDetector>`,
        :py:func:`SsaChangePointDetector
        <nimbusml.preprocessing.timeseries.SsaChangePointDetector>`.
        :py:func:`SsaSpikeDetector
        <nimbusml.preprocessing.timeseries.SsaSpikeDetector>`.

    .. index:: models, timeseries, transform

    Example:
       .. literalinclude:: /../nimbusml/examples/examples_from_dataframe/SsaForecaster_df.py
              :language: python
    """

    @trace
    def __init__(
            self,
            window_size=0,
            series_length=0,
            train_size=0,
            horizon=0,
            confidence_level=0.95,
            variable_horizon=False,
            confidence_lower_bound_column=None,
            confidence_upper_bound_column=None,
            rank_selection_method='Exact',
            rank=None,
            max_rank=None,
            should_stabilize=True,
            should_maintain_info=False,
            max_growth=None,
            discount_factor=1.0,
            is_adaptive=False,
            **params):
        BasePipelineItem.__init__(
            self, type='transform', **params)

        self.window_size = window_size
        self.series_length = series_length
        self.train_size = train_size
        self.horizon = horizon
        self.confidence_level = confidence_level
        self.variable_horizon = variable_horizon
        self.confidence_lower_bound_column = confidence_lower_bound_column
        self.confidence_upper_bound_column = confidence_upper_bound_column
        self.rank_selection_method = rank_selection_method
        self.rank = rank
        self.max_rank = max_rank
        self.should_stabilize = should_stabilize
        self.should_maintain_info = should_maintain_info
        self.max_growth = max_growth
        self.discount_factor = discount_factor
        self.is_adaptive = is_adaptive

    @property
    def _entrypoint(self):
        return timeseriesprocessingentrypoints_ssaforecasting

    @trace
    def _get_node(self, **all_args):
        algo_args = dict(
            source=self.source,
            name=self._name_or_source,
            window_size=self.window_size,
            series_length=self.series_length,
            train_size=self.train_size,
            horizon=self.horizon,
            confidence_level=self.confidence_level,
            variable_horizon=self.variable_horizon,
            confidence_lower_bound_column=self.confidence_lower_bound_column,
            confidence_upper_bound_column=self.confidence_upper_bound_column,
            rank_selection_method=self.rank_selection_method,
            rank=self.rank,
            max_rank=self.max_rank,
            should_stabilize=self.should_stabilize,
            should_maintain_info=self.should_maintain_info,
            max_growth=self.max_growth,
            discount_factor=self.discount_factor,
            is_adaptive=self.is_adaptive)

        all_args.update(algo_args)
        return self._entrypoint(**all_args)
