# --------------------------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License.
# --------------------------------------------------------------------------------------------
# - Generated by tools/entrypoint_compiler.py: do not edit by hand
"""
RegressorBestDiverseSelector
"""

__all__ = ["RegressorBestDiverseSelector"]

import numbers

from ....entrypoints._ensembleregressiondiversitymeasure_regressiondisagreementdiversitymeasure import \
    regression_disagreement_diversity_measure
from ....utils.entrypoints import Component
from ....utils.utils import trace, try_set


class RegressorBestDiverseSelector(Component):
    """
    **Description**
        Combines the models whose predictions are as diverse as possible.

    :param diversity_metric_type: The metric type to be used to find the
        diversity among base learners.

    :param learners_selection_proportion: The proportion of best base learners
        to be selected. The range is 0.0-1.0.

    :param validation_dataset_proportion: The proportion of instances to be
        selected to test the individual base learner. If it is 0, it uses
        training set.

    :param params: Additional arguments sent to compute engine.

    """

    @trace
    def __init__(
            self,
            diversity_metric_type=None,
            learners_selection_proportion=0.5,
            validation_dataset_proportion=0.3,
            **params):

        self.diversity_metric_type = diversity_metric_type
        self.learners_selection_proportion = learners_selection_proportion
        self.validation_dataset_proportion = validation_dataset_proportion
        self.kind = 'EnsembleRegressionSubModelSelector'
        self.name = 'BestDiverseSelectorRegression'
        self.settings = {}

        if diversity_metric_type is not None:
            self.settings['DiversityMetricType'] = try_set(
                obj=diversity_metric_type, none_acceptable=True, is_of_type=dict)
        if learners_selection_proportion is not None:
            self.settings['LearnersSelectionProportion'] = try_set(
                obj=learners_selection_proportion,
                none_acceptable=True,
                is_of_type=numbers.Real)
        if validation_dataset_proportion is not None:
            self.settings['ValidationDatasetProportion'] = try_set(
                obj=validation_dataset_proportion,
                none_acceptable=True,
                is_of_type=numbers.Real)

        super(
            RegressorBestDiverseSelector,
            self).__init__(
            name=self.name,
            settings=self.settings,
            kind=self.kind)
