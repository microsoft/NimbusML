# --------------------------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License.
# --------------------------------------------------------------------------------------------
# - Generated by tools/entrypoint_compiler.py: do not edit by hand
"""
CustomStopWordsRemover
"""

__all__ = ["CustomStopWordsRemover"]


from .....utils.entrypoints import Component
from .....utils.utils import trace, try_set


class CustomStopWordsRemover(Component):
    """

    Remover with list of stopwords specified by the user.

    .. remarks::
        The :py:class:`NGramFeaturizer
        <nimbusml.feature_extraction.text.NGramFeaturizer>` transform produces a
        bag of counts of
        sequences of consecutive words from a given corpus of text.
        It also offers stopwords removing. A user-defined list of stopwords.
        It accepts the following option: ``stopword``.

    :param stopword: List of stopwords.

    :param params: Additional arguments sent to compute engine.

    .. seealso::
        :py:class:`NGramFeaturizer
        <nimbusml.feature_extraction.text.NGramFeaturizer>`,
        :py:class:`PredefinedStopWordsRemover
        <nimbusml.feature_extraction.text.stopwords.PredefinedStopWordsRemover>`,

    .. index:: transform, featurizer, text

    Example:
       .. literalinclude:: /../nimbusml/examples/NGramFeaturizer2.py
              :language: python
    """

    @trace
    def __init__(
            self,
            stopword=None,
            **params):

        self.stopword = stopword
        self.kind = 'StopWordsRemover'
        self.name = 'Custom'
        self.settings = {}

        if stopword is not None:
            self.settings['Stopword'] = try_set(
                obj=stopword, none_acceptable=True, is_of_type=list)

        super(
            CustomStopWordsRemover,
            self).__init__(
            name=self.name,
            settings=self.settings,
            kind=self.kind)
