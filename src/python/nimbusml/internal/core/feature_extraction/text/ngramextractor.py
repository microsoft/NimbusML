# --------------------------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License.
# --------------------------------------------------------------------------------------------
# - Generated by tools/entrypoint_compiler.py: do not edit by hand
"""
NGramExtractor
"""

__all__ = ["NGramExtractor"]


from ....entrypoints.transforms_ngramtranslator import \
    transforms_ngramtranslator
from ....utils.utils import trace
from ...base_pipeline_item import BasePipelineItem, DefaultSignature


class NGramExtractor(BasePipelineItem, DefaultSignature):
    """
    **Description**
        Produces a bag of counts of n-grams (sequences of consecutive values of length 1-n) in a given vector of keys. It does so by building a dictionary of n-grams and using the id in the dictionary as the index in the bag.

    :param ngram_length: Maximum n-gram length.

    :param all_lengths: Whether to store all n-gram lengths up to ngramLength,
        or only ngramLength.

    :param skip_length: Maximum number of tokens to skip when constructing an
        n-gram.

    :param max_num_terms: Maximum number of n-grams to store in the dictionary.

    :param weighting: The weighting criteria.

    :param params: Additional arguments sent to compute engine.

    """

    @trace
    def __init__(
            self,
            ngram_length=2,
            all_lengths=True,
            skip_length=0,
            max_num_terms=[10000000],
            weighting='Tf',
            **params):
        BasePipelineItem.__init__(
            self, type='transform', **params)

        self.ngram_length = ngram_length
        self.all_lengths = all_lengths
        self.skip_length = skip_length
        self.max_num_terms = max_num_terms
        self.weighting = weighting

    @property
    def _entrypoint(self):
        return transforms_ngramtranslator

    @trace
    def _get_node(self, **all_args):

        input_columns = self.input
        if input_columns is None and 'input' in all_args:
            input_columns = all_args['input']
        if 'input' in all_args:
            all_args.pop('input')

        output_columns = self.output
        if output_columns is None and 'output' in all_args:
            output_columns = all_args['output']
        if 'output' in all_args:
            all_args.pop('output')

        # validate input
        if input_columns is None:
            raise ValueError(
                "'None' input passed when it cannot be none.")

        if not isinstance(input_columns, list):
            raise ValueError(
                "input has to be a list of strings, instead got %s" %
                type(input_columns))

        # validate output
        if output_columns is None:
            output_columns = input_columns

        if not isinstance(output_columns, list):
            raise ValueError(
                "output has to be a list of strings, instead got %s" %
                type(output_columns))

        algo_args = dict(
            column=[
                dict(
                    Source=i,
                    Name=o) for i,
                o in zip(
                    input_columns,
                    output_columns)] if input_columns else None,
            ngram_length=self.ngram_length,
            all_lengths=self.all_lengths,
            skip_length=self.skip_length,
            max_num_terms=self.max_num_terms,
            weighting=self.weighting)

        all_args.update(algo_args)
        return self._entrypoint(**all_args)
