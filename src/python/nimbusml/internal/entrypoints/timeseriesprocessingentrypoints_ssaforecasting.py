# - Generated by tools/entrypoint_compiler.py: do not edit by hand
"""
TimeSeriesProcessingEntryPoints.SsaForecasting
"""

import numbers

from ..utils.entrypoints import EntryPoint
from ..utils.utils import try_set, unlist


def timeseriesprocessingentrypoints_ssaforecasting(
        source,
        data,
        name,
        output_data=None,
        model=None,
        confidence=99.0,
        window_size=10,
        series_length=20,
        train_size=100,
        discount_factor=1.0,
        is_adaptive=False,
        **params):
    """
    **Description**
        This transform forecasts using Singular Spectrum Analysis (SSA).

    :param source: The name of the source column. (inputs).
    :param data: Input dataset (inputs).
    :param name: The name of the new column. (inputs).
    :param confidence: The confidence for spike detection in the
        range [0, 100]. (inputs).
    :param window_size: Window size (inputs).
    :param series_length: Series length (inputs).
    :param train_size: Train size (inputs).
    :param discount_factor: The discount factor in [0, 1] (inputs).
    :param is_adaptive: The flag determing whether the model is
        adaptive (inputs).
    :param output_data: Transformed dataset (outputs).
    :param model: Transform model (outputs).
    """

    entrypoint_name = 'TimeSeriesProcessingEntryPoints.SsaForecasting'
    inputs = {}
    outputs = {}

    if source is not None:
        inputs['Source'] = try_set(
            obj=source,
            none_acceptable=False,
            is_of_type=str,
            is_column=True)
    if data is not None:
        inputs['Data'] = try_set(
            obj=data,
            none_acceptable=False,
            is_of_type=str)
    if name is not None:
        inputs['Name'] = try_set(
            obj=name,
            none_acceptable=False,
            is_of_type=str,
            is_column=True)
    if confidence is not None:
        inputs['Confidence'] = try_set(
            obj=confidence,
            none_acceptable=False,
            is_of_type=numbers.Real)
    if window_size is not None:
        inputs['WindowSize'] = try_set(
            obj=window_size,
            none_acceptable=False,
            is_of_type=numbers.Real)
    if series_length is not None:
        inputs['SeriesLength'] = try_set(
            obj=series_length,
            none_acceptable=False,
            is_of_type=numbers.Real)
    if train_size is not None:
        inputs['TrainSize'] = try_set(
            obj=train_size,
            none_acceptable=False,
            is_of_type=numbers.Real)
    if discount_factor is not None:
        inputs['DiscountFactor'] = try_set(
            obj=discount_factor,
            none_acceptable=True,
            is_of_type=numbers.Real)
    if is_adaptive is not None:
        inputs['IsAdaptive'] = try_set(
            obj=is_adaptive,
            none_acceptable=True,
            is_of_type=bool)
    if output_data is not None:
        outputs['OutputData'] = try_set(
            obj=output_data,
            none_acceptable=False,
            is_of_type=str)
    if model is not None:
        outputs['Model'] = try_set(
            obj=model,
            none_acceptable=False,
            is_of_type=str)

    input_variables = {
        x for x in unlist(inputs.values())
        if isinstance(x, str) and x.startswith("$")}
    output_variables = {
        x for x in unlist(outputs.values())
        if isinstance(x, str) and x.startswith("$")}

    entrypoint = EntryPoint(
        name=entrypoint_name, inputs=inputs, outputs=outputs,
        input_variables=input_variables,
        output_variables=output_variables)
    return entrypoint
