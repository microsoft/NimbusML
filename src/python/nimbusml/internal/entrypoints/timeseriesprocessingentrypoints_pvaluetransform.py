# - Generated by tools/entrypoint_compiler.py: do not edit by hand
"""
TimeSeriesProcessingEntryPoints.PValueTransform
"""

import numbers

from ..utils.entrypoints import EntryPoint
from ..utils.utils import try_set, unlist


def timeseriesprocessingentrypoints_pvaluetransform(
        source,
        data,
        name,
        output_data=None,
        model=None,
        seed=0,
        positive_side=True,
        window_size=1,
        initial_window_size=0,
        **params):
    """
    **Description**
        This P-Value transform calculates the p-value of the current input in
        the sequence with regard to the values in the sliding window.

    :param source: The name of the source column (inputs).
    :param data: Input dataset (inputs).
    :param name: The name of the new column (inputs).
    :param seed: The seed value of the random generator (inputs).
    :param positive_side: The flag that determines whether the
        p-values are calculated on the positive side (inputs).
    :param window_size: The size of the sliding window for computing
        the p-value (inputs).
    :param initial_window_size: The size of the initial window for
        computing the p-value. The default value is set to 0, which
        means there is no initial window considered. (inputs).
    :param output_data: Transformed dataset (outputs).
    :param model: Transform model (outputs).
    """

    entrypoint_name = 'TimeSeriesProcessingEntryPoints.PValueTransform'
    inputs = {}
    outputs = {}

    if source is not None:
        inputs['Source'] = try_set(
            obj=source,
            none_acceptable=False,
            is_of_type=str,
            is_column=True)
    if data is not None:
        inputs['Data'] = try_set(
            obj=data,
            none_acceptable=False,
            is_of_type=str)
    if name is not None:
        inputs['Name'] = try_set(
            obj=name,
            none_acceptable=False,
            is_of_type=str,
            is_column=True)
    if seed is not None:
        inputs['Seed'] = try_set(
            obj=seed,
            none_acceptable=True,
            is_of_type=numbers.Real)
    if positive_side is not None:
        inputs['PositiveSide'] = try_set(
            obj=positive_side,
            none_acceptable=True,
            is_of_type=bool)
    if window_size is not None:
        inputs['WindowSize'] = try_set(
            obj=window_size,
            none_acceptable=True,
            is_of_type=numbers.Real)
    if initial_window_size is not None:
        inputs['InitialWindowSize'] = try_set(
            obj=initial_window_size,
            none_acceptable=True,
            is_of_type=numbers.Real)
    if output_data is not None:
        outputs['OutputData'] = try_set(
            obj=output_data,
            none_acceptable=False,
            is_of_type=str)
    if model is not None:
        outputs['Model'] = try_set(
            obj=model,
            none_acceptable=False,
            is_of_type=str)

    input_variables = {
        x for x in unlist(inputs.values())
        if isinstance(x, str) and x.startswith("$")}
    output_variables = {
        x for x in unlist(outputs.values())
        if isinstance(x, str) and x.startswith("$")}

    entrypoint = EntryPoint(
        name=entrypoint_name, inputs=inputs, outputs=outputs,
        input_variables=input_variables,
        output_variables=output_variables)
    return entrypoint
