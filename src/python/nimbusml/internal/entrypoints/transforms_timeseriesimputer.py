# - Generated by tools/entrypoint_compiler.py: do not edit by hand
"""
Transforms.TimeSeriesImputer
"""


from ..utils.entrypoints import EntryPoint
from ..utils.utils import try_set, unlist


def transforms_timeseriesimputer(
        time_series_column,
        data,
        grain_columns,
        output_data=None,
        model=None,
        filter_columns=None,
        filter_mode='Exclude',
        impute_mode='ForwardFill',
        supress_type_errors=False,
        **params):
    """
    **Description**
        Fills in missing row and values

    :param time_series_column: Column representing the time (inputs).
    :param data: Input dataset (inputs).
    :param grain_columns: List of grain columns (inputs).
    :param filter_columns: Columns to filter (inputs).
    :param filter_mode: Filter mode. Either include or exclude
        (inputs).
    :param impute_mode: Mode for imputing, defaults to ForwardFill if
        not provided (inputs).
    :param supress_type_errors: Suppress the errors that would occur
        if a column and impute mode are incompatible. If true, will
        skip the column. If false, will stop and throw an error.
        (inputs).
    :param output_data: Transformed dataset (outputs).
    :param model: Transform model (outputs).
    """

    entrypoint_name = 'Transforms.TimeSeriesImputer'
    inputs = {}
    outputs = {}

    if time_series_column is not None:
        inputs['TimeSeriesColumn'] = try_set(
            obj=time_series_column,
            none_acceptable=False,
            is_of_type=str,
            is_column=True)
    if data is not None:
        inputs['Data'] = try_set(
            obj=data,
            none_acceptable=False,
            is_of_type=str)
    if grain_columns is not None:
        inputs['GrainColumns'] = try_set(
            obj=grain_columns,
            none_acceptable=False,
            is_of_type=list,
            is_column=True)
    if filter_columns is not None:
        inputs['FilterColumns'] = try_set(
            obj=filter_columns,
            none_acceptable=True,
            is_of_type=list,
            is_column=True)
    if filter_mode is not None:
        inputs['FilterMode'] = try_set(
            obj=filter_mode,
            none_acceptable=True,
            is_of_type=str,
            values=[
                'NoFilter',
                'Include',
                'Exclude'])
    if impute_mode is not None:
        inputs['ImputeMode'] = try_set(
            obj=impute_mode,
            none_acceptable=True,
            is_of_type=str,
            values=[
                'ForwardFill',
                'BackFill',
                'Median'])
    if supress_type_errors is not None:
        inputs['SupressTypeErrors'] = try_set(
            obj=supress_type_errors,
            none_acceptable=True,
            is_of_type=bool)
    if output_data is not None:
        outputs['OutputData'] = try_set(
            obj=output_data,
            none_acceptable=False,
            is_of_type=str)
    if model is not None:
        outputs['Model'] = try_set(
            obj=model,
            none_acceptable=False,
            is_of_type=str)

    input_variables = {
        x for x in unlist(inputs.values())
        if isinstance(x, str) and x.startswith("$")}
    output_variables = {
        x for x in unlist(outputs.values())
        if isinstance(x, str) and x.startswith("$")}

    entrypoint = EntryPoint(
        name=entrypoint_name, inputs=inputs, outputs=outputs,
        input_variables=input_variables,
        output_variables=output_variables)
    return entrypoint
