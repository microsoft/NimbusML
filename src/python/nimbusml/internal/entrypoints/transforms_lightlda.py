# - Generated by tools/entrypoint_compiler.py: do not edit by hand
"""
Transforms.LightLda
"""

import numbers

from ..utils.entrypoints import EntryPoint
from ..utils.utils import try_set, unlist


def transforms_lightlda(
        data,
        column,
        output_data=None,
        model=None,
        num_topic=100,
        num_threads=None,
        num_max_doc_token=512,
        alpha_sum=100.0,
        beta=0.01,
        mhstep=4,
        num_iterations=200,
        likelihood_interval=5,
        num_summary_term_per_topic=10,
        num_burnin_iterations=10,
        reset_random_generator=False,
        output_topic_word_summary=False,
        **params):
    """
    **Description**
        The LDA transform implements LightLDA, a state-of-the-art
        implementation of Latent Dirichlet Allocation.

    :param data: Input dataset (inputs).
    :param column: New column definition(s) (optional form:
        name:srcs) (inputs).
    :param num_topic: The number of topics (inputs).
    :param num_threads: The number of training threads. Default value
        depends on number of logical processors. (inputs).
    :param num_max_doc_token: The threshold of maximum count of
        tokens per doc (inputs).
    :param alpha_sum: Dirichlet prior on document-topic vectors
        (inputs).
    :param beta: Dirichlet prior on vocab-topic vectors (inputs).
    :param mhstep: Number of Metropolis Hasting step (inputs).
    :param num_iterations: Number of iterations (inputs).
    :param likelihood_interval: Compute log likelihood over local
        dataset on this iteration interval (inputs).
    :param num_summary_term_per_topic: The number of words to
        summarize the topic (inputs).
    :param num_burnin_iterations: The number of burn-in iterations
        (inputs).
    :param reset_random_generator: Reset the random number generator
        for each document (inputs).
    :param output_topic_word_summary: Whether to output the topic-
        word summary in text format (inputs).
    :param output_data: Transformed dataset (outputs).
    :param model: Transform model (outputs).
    """

    entrypoint_name = 'Transforms.LightLda'
    inputs = {}
    outputs = {}

    if data is not None:
        inputs['Data'] = try_set(
            obj=data,
            none_acceptable=False,
            is_of_type=str)
    if column is not None:
        inputs['Column'] = try_set(
            obj=column,
            none_acceptable=False,
            is_of_type=list,
            is_column=True)
    if num_topic is not None:
        inputs['NumTopic'] = try_set(
            obj=num_topic,
            none_acceptable=True,
            is_of_type=numbers.Real)
    if num_threads is not None:
        inputs['NumThreads'] = try_set(
            obj=num_threads,
            none_acceptable=True,
            is_of_type=numbers.Real)
    if num_max_doc_token is not None:
        inputs['NumMaxDocToken'] = try_set(
            obj=num_max_doc_token,
            none_acceptable=True,
            is_of_type=numbers.Real)
    if alpha_sum is not None:
        inputs['AlphaSum'] = try_set(
            obj=alpha_sum,
            none_acceptable=True,
            is_of_type=numbers.Real)
    if beta is not None:
        inputs['Beta'] = try_set(
            obj=beta,
            none_acceptable=True,
            is_of_type=numbers.Real)
    if mhstep is not None:
        inputs['Mhstep'] = try_set(
            obj=mhstep,
            none_acceptable=True,
            is_of_type=numbers.Real)
    if num_iterations is not None:
        inputs['NumIterations'] = try_set(
            obj=num_iterations,
            none_acceptable=True,
            is_of_type=numbers.Real)
    if likelihood_interval is not None:
        inputs['LikelihoodInterval'] = try_set(
            obj=likelihood_interval,
            none_acceptable=True,
            is_of_type=numbers.Real)
    if num_summary_term_per_topic is not None:
        inputs['NumSummaryTermPerTopic'] = try_set(
            obj=num_summary_term_per_topic,
            none_acceptable=True,
            is_of_type=numbers.Real)
    if num_burnin_iterations is not None:
        inputs['NumBurninIterations'] = try_set(
            obj=num_burnin_iterations,
            none_acceptable=True,
            is_of_type=numbers.Real)
    if reset_random_generator is not None:
        inputs['ResetRandomGenerator'] = try_set(
            obj=reset_random_generator, none_acceptable=True, is_of_type=bool)
    if output_topic_word_summary is not None:
        inputs['OutputTopicWordSummary'] = try_set(
            obj=output_topic_word_summary,
            none_acceptable=True,
            is_of_type=bool)
    if output_data is not None:
        outputs['OutputData'] = try_set(
            obj=output_data,
            none_acceptable=False,
            is_of_type=str)
    if model is not None:
        outputs['Model'] = try_set(
            obj=model,
            none_acceptable=False,
            is_of_type=str)

    input_variables = {
        x for x in unlist(inputs.values())
        if isinstance(x, str) and x.startswith("$")}
    output_variables = {
        x for x in unlist(outputs.values())
        if isinstance(x, str) and x.startswith("$")}

    entrypoint = EntryPoint(
        name=entrypoint_name, inputs=inputs, outputs=outputs,
        input_variables=input_variables,
        output_variables=output_variables)
    return entrypoint
