# - Generated by tools/entrypoint_compiler.py: do not edit by hand
"""
Transforms.FeatureContributionCalculationTransformer
"""

import numbers

from ..utils.entrypoints import EntryPoint
from ..utils.utils import try_set, unlist


def transforms_featurecontributioncalculationtransformer(
        predictor_model,
        data,
        output_data=None,
        model=None,
        feature_column='Features',
        top=10,
        bottom=10,
        normalize=True,
        **params):
    """
    **Description**
        For each data point, calculates the contribution of individual
        features to the model prediction.

    :param predictor_model: The predictor model to apply to data
        (inputs).
    :param data: Input dataset (inputs).
    :param feature_column: Name of feature column (inputs).
    :param top: Number of top contributions (inputs).
    :param bottom: Number of bottom contributions (inputs).
    :param normalize: Whether or not output of Features contribution
        should be normalized (inputs).
    :param output_data: Transformed dataset (outputs).
    :param model: Transform model (outputs).
    """

    entrypoint_name = 'Transforms.FeatureContributionCalculationTransformer'
    inputs = {}
    outputs = {}

    if predictor_model is not None:
        inputs['PredictorModel'] = try_set(
            obj=predictor_model,
            none_acceptable=False,
            is_of_type=str)
    if data is not None:
        inputs['Data'] = try_set(
            obj=data,
            none_acceptable=False,
            is_of_type=str)
    if feature_column is not None:
        inputs['FeatureColumn'] = try_set(
            obj=feature_column,
            none_acceptable=True,
            is_of_type=str,
            is_column=True)
    if top is not None:
        inputs['Top'] = try_set(
            obj=top,
            none_acceptable=True,
            is_of_type=numbers.Real)
    if bottom is not None:
        inputs['Bottom'] = try_set(
            obj=bottom,
            none_acceptable=True,
            is_of_type=numbers.Real)
    if normalize is not None:
        inputs['Normalize'] = try_set(
            obj=normalize,
            none_acceptable=True,
            is_of_type=bool)
    if output_data is not None:
        outputs['OutputData'] = try_set(
            obj=output_data,
            none_acceptable=False,
            is_of_type=str)
    if model is not None:
        outputs['Model'] = try_set(
            obj=model,
            none_acceptable=False,
            is_of_type=str)

    input_variables = {
        x for x in unlist(inputs.values())
        if isinstance(x, str) and x.startswith("$")}
    output_variables = {
        x for x in unlist(outputs.values())
        if isinstance(x, str) and x.startswith("$")}

    entrypoint = EntryPoint(
        name=entrypoint_name, inputs=inputs, outputs=outputs,
        input_variables=input_variables,
        output_variables=output_variables)
    return entrypoint
