# - Generated by tools/entrypoint_compiler.py: do not edit by hand
"""
Trainers.LinearSvmBinaryClassifier
"""

import numbers

from ..utils.entrypoints import EntryPoint
from ..utils.utils import try_set, unlist


def trainers_linearsvmbinaryclassifier(
        training_data,
        predictor_model=None,
        feature_column_name='Features',
        label_column_name='Label',
        example_weight_column_name=None,
        normalize_features='Auto',
        caching='Auto',
        lambda_=0.001,
        perform_projection=False,
        number_of_iterations=1,
        initial_weights_diameter=0.0,
        no_bias=False,
        calibrator=None,
        max_calibration_examples=1000000,
        initial_weights=None,
        shuffle=True,
        batch_size=1,
        **params):
    """
    **Description**
        Train a linear SVM.

    :param training_data: The data to be used for training (inputs).
    :param feature_column_name: Column to use for features (inputs).
    :param label_column_name: Column to use for labels (inputs).
    :param example_weight_column_name: Column to use for example
        weight (inputs).
    :param normalize_features: Normalize option for the feature
        column (inputs).
    :param caching: Whether trainer should cache input training data
        (inputs).
    :param lambda_: Regularizer constant (inputs).
    :param perform_projection: Perform projection to unit-ball?
        Typically used with batch size > 1. (inputs).
    :param number_of_iterations: Number of iterations (inputs).
    :param initial_weights_diameter: Init weights diameter (inputs).
    :param no_bias: No bias (inputs).
    :param calibrator: The calibrator kind to apply to the predictor.
        Specify null for no calibration (inputs).
    :param max_calibration_examples: The maximum number of examples
        to use when training the calibrator (inputs).
    :param initial_weights: Initial Weights and bias, comma-separated
        (inputs).
    :param shuffle: Whether to shuffle for each training iteration
        (inputs).
    :param batch_size: Batch size (inputs).
    :param predictor_model: The trained model (outputs).
    """

    entrypoint_name = 'Trainers.LinearSvmBinaryClassifier'
    inputs = {}
    outputs = {}

    if training_data is not None:
        inputs['TrainingData'] = try_set(
            obj=training_data,
            none_acceptable=False,
            is_of_type=str)
    if feature_column_name is not None:
        inputs['FeatureColumnName'] = try_set(
            obj=feature_column_name,
            none_acceptable=True,
            is_of_type=str,
            is_column=True)
    if label_column_name is not None:
        inputs['LabelColumnName'] = try_set(
            obj=label_column_name,
            none_acceptable=True,
            is_of_type=str,
            is_column=True)
    if example_weight_column_name is not None:
        inputs['ExampleWeightColumnName'] = try_set(
            obj=example_weight_column_name,
            none_acceptable=True,
            is_of_type=str,
            is_column=True)
    if normalize_features is not None:
        inputs['NormalizeFeatures'] = try_set(
            obj=normalize_features,
            none_acceptable=True,
            is_of_type=str,
            values=[
                'No',
                'Warn',
                'Auto',
                'Yes'])
    if caching is not None:
        inputs['Caching'] = try_set(
            obj=caching,
            none_acceptable=True,
            is_of_type=str,
            values=[
                'Auto',
                'Memory',
                'None'])
    if lambda_ is not None:
        inputs['Lambda'] = try_set(
            obj=lambda_,
            none_acceptable=True,
            is_of_type=numbers.Real)
    if perform_projection is not None:
        inputs['PerformProjection'] = try_set(
            obj=perform_projection, none_acceptable=True, is_of_type=bool)
    if number_of_iterations is not None:
        inputs['NumberOfIterations'] = try_set(
            obj=number_of_iterations,
            none_acceptable=True,
            is_of_type=numbers.Real)
    if initial_weights_diameter is not None:
        inputs['InitialWeightsDiameter'] = try_set(
            obj=initial_weights_diameter,
            none_acceptable=True,
            is_of_type=numbers.Real)
    if no_bias is not None:
        inputs['NoBias'] = try_set(
            obj=no_bias,
            none_acceptable=True,
            is_of_type=bool)
    if calibrator is not None:
        inputs['Calibrator'] = try_set(
            obj=calibrator,
            none_acceptable=True,
            is_of_type=dict)
    if max_calibration_examples is not None:
        inputs['MaxCalibrationExamples'] = try_set(
            obj=max_calibration_examples,
            none_acceptable=True,
            is_of_type=numbers.Real)
    if initial_weights is not None:
        inputs['InitialWeights'] = try_set(
            obj=initial_weights,
            none_acceptable=True,
            is_of_type=str)
    if shuffle is not None:
        inputs['Shuffle'] = try_set(
            obj=shuffle,
            none_acceptable=True,
            is_of_type=bool)
    if batch_size is not None:
        inputs['BatchSize'] = try_set(
            obj=batch_size,
            none_acceptable=True,
            is_of_type=numbers.Real)
    if predictor_model is not None:
        outputs['PredictorModel'] = try_set(
            obj=predictor_model, none_acceptable=False, is_of_type=str)

    input_variables = {
        x for x in unlist(inputs.values())
        if isinstance(x, str) and x.startswith("$")}
    output_variables = {
        x for x in unlist(outputs.values())
        if isinstance(x, str) and x.startswith("$")}

    entrypoint = EntryPoint(
        name=entrypoint_name, inputs=inputs, outputs=outputs,
        input_variables=input_variables,
        output_variables=output_variables)
    return entrypoint
