# - Generated by tools/entrypoint_compiler.py: do not edit by hand
"""
Trainers.OrdinaryLeastSquaresRegressor
"""

import numbers

from ..utils.entrypoints import EntryPoint
from ..utils.utils import try_set, unlist


def trainers_ordinaryleastsquaresregressor(
        training_data,
        predictor_model=None,
        feature_column='Features',
        label_column='Label',
        weight_column=None,
        normalize_features='Auto',
        caching='Auto',
        l2_weight=1e-06,
        per_parameter_significance=True,
        **params):
    """
    **Description**
        Train an OLS regression model.

    :param training_data: The data to be used for training (inputs).
    :param feature_column: Column to use for features (inputs).
    :param label_column: Column to use for labels (inputs).
    :param weight_column: Column to use for example weight (inputs).
    :param normalize_features: Normalize option for the feature
        column (inputs).
    :param caching: Whether learner should cache input training data
        (inputs).
    :param l2_weight: L2 regularization weight (inputs).
    :param per_parameter_significance: Whether to calculate per
        parameter significance statistics (inputs).
    :param predictor_model: The trained model (outputs).
    """

    entrypoint_name = 'Trainers.OrdinaryLeastSquaresRegressor'
    inputs = {}
    outputs = {}

    if training_data is not None:
        inputs['TrainingData'] = try_set(
            obj=training_data,
            none_acceptable=False,
            is_of_type=str)
    if feature_column is not None:
        inputs['FeatureColumn'] = try_set(
            obj=feature_column,
            none_acceptable=True,
            is_of_type=str,
            is_column=True)
    if label_column is not None:
        inputs['LabelColumn'] = try_set(
            obj=label_column,
            none_acceptable=True,
            is_of_type=str,
            is_column=True)
    if weight_column is not None:
        inputs['WeightColumn'] = try_set(
            obj=weight_column,
            none_acceptable=True,
            is_of_type=str,
            is_column=True)
    if normalize_features is not None:
        inputs['NormalizeFeatures'] = try_set(
            obj=normalize_features,
            none_acceptable=True,
            is_of_type=str,
            values=[
                'No',
                'Warn',
                'Auto',
                'Yes'])
    if caching is not None:
        inputs['Caching'] = try_set(
            obj=caching,
            none_acceptable=True,
            is_of_type=str,
            values=[
                'Auto',
                'Memory',
                'None'])
    if l2_weight is not None:
        inputs['L2Weight'] = try_set(
            obj=l2_weight,
            none_acceptable=True,
            is_of_type=numbers.Real)
    if per_parameter_significance is not None:
        inputs['PerParameterSignificance'] = try_set(
            obj=per_parameter_significance,
            none_acceptable=True,
            is_of_type=bool)
    if predictor_model is not None:
        outputs['PredictorModel'] = try_set(
            obj=predictor_model, none_acceptable=False, is_of_type=str)

    input_variables = {
        x for x in unlist(inputs.values())
        if isinstance(x, str) and x.startswith("$")}
    output_variables = {
        x for x in unlist(outputs.values())
        if isinstance(x, str) and x.startswith("$")}

    entrypoint = EntryPoint(
        name=entrypoint_name, inputs=inputs, outputs=outputs,
        input_variables=input_variables,
        output_variables=output_variables)
    return entrypoint
