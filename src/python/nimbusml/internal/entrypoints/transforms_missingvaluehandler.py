# - Generated by tools/entrypoint_compiler.py: do not edit by hand
"""
Transforms.MissingValueHandler
"""


from ..utils.entrypoints import EntryPoint
from ..utils.utils import try_set, unlist


def transforms_missingvaluehandler(
        column,
        data,
        output_data=None,
        model=None,
        replace_with='Def',
        impute_by_slot=True,
        concat=True,
        **params):
    """
    **Description**
        Handle missing values by replacing them with either the default value
        or the mean/min/max value (for non-text columns only). An
        indicator column can optionally be concatenated, if the input
        column type is numeric.

    :param column: New column definition(s) (optional form:
        name:rep:src) (inputs).
    :param data: Input dataset (inputs).
    :param replace_with: The replacement method to utilize (inputs).
    :param impute_by_slot: Whether to impute values by slot (inputs).
    :param concat: Whether or not to concatenate an indicator vector
        column to the value column (inputs).
    :param output_data: Transformed dataset (outputs).
    :param model: Transform model (outputs).
    """

    entrypoint_name = 'Transforms.MissingValueHandler'
    inputs = {}
    outputs = {}

    if column is not None:
        inputs['Column'] = try_set(
            obj=column,
            none_acceptable=False,
            is_of_type=list,
            is_column=True)
    if data is not None:
        inputs['Data'] = try_set(
            obj=data,
            none_acceptable=False,
            is_of_type=str)
    if replace_with is not None:
        inputs['ReplaceWith'] = try_set(
            obj=replace_with,
            none_acceptable=True,
            is_of_type=str,
            values=[
                'DefaultValue',
                'Mean',
                'Minimum',
                'Maximum'])
    if impute_by_slot is not None:
        inputs['ImputeBySlot'] = try_set(
            obj=impute_by_slot,
            none_acceptable=True,
            is_of_type=bool)
    if concat is not None:
        inputs['Concat'] = try_set(
            obj=concat,
            none_acceptable=True,
            is_of_type=bool)
    if output_data is not None:
        outputs['OutputData'] = try_set(
            obj=output_data,
            none_acceptable=False,
            is_of_type=str)
    if model is not None:
        outputs['Model'] = try_set(
            obj=model,
            none_acceptable=False,
            is_of_type=str)

    input_variables = {
        x for x in unlist(inputs.values())
        if isinstance(x, str) and x.startswith("$")}
    output_variables = {
        x for x in unlist(outputs.values())
        if isinstance(x, str) and x.startswith("$")}

    entrypoint = EntryPoint(
        name=entrypoint_name, inputs=inputs, outputs=outputs,
        input_variables=input_variables,
        output_variables=output_variables)
    return entrypoint
