# - Generated by tools/entrypoint_compiler.py: do not edit by hand
"""
Models.OnnxConverter
"""


from ..utils.entrypoints import EntryPoint
from ..utils.utils import try_set, unlist


def models_onnxconverter(
        onnx,
        data_file=None,
        json=None,
        name=None,
        domain=None,
        inputs_to_drop=None,
        outputs_to_drop=None,
        model=None,
        onnx_version='Stable',
        predictive_model=None,
        **params):
    """
    **Description**
        Converts the model to ONNX format.

    :param data_file: The data file (inputs).
    :param onnx: The path to write the output ONNX to. (inputs).
    :param json: The path to write the output JSON to. (inputs).
    :param name: The 'name' property in the output ONNX. By default
        this will be the ONNX extension-less name. (inputs).
    :param domain: The 'domain' property in the output ONNX.
        (inputs).
    :param inputs_to_drop: Array of input column names to drop
        (inputs).
    :param outputs_to_drop: Array of output column names to drop
        (inputs).
    :param model: Model that needs to be converted to ONNX format.
        (inputs).
    :param onnx_version: The targeted ONNX version. It can be either
        "Stable" or "Experimental". If "Experimental" is used,
        produced model can contain components that is not officially
        supported in ONNX standard. (inputs).
    :param predictive_model: Predictor model that needs to be
        converted to ONNX format. (inputs).
    """

    entrypoint_name = 'Models.OnnxConverter'
    inputs = {}
    outputs = {}

    if data_file is not None:
        inputs['DataFile'] = try_set(
            obj=data_file,
            none_acceptable=True,
            is_of_type=str)
    if onnx is not None:
        inputs['Onnx'] = try_set(
            obj=onnx,
            none_acceptable=False,
            is_of_type=str)
    if json is not None:
        inputs['Json'] = try_set(
            obj=json,
            none_acceptable=True,
            is_of_type=str)
    if name is not None:
        inputs['Name'] = try_set(
            obj=name,
            none_acceptable=True,
            is_of_type=str,
            is_column=True)
    if domain is not None:
        inputs['Domain'] = try_set(
            obj=domain,
            none_acceptable=True,
            is_of_type=str)
    if inputs_to_drop is not None:
        inputs['InputsToDrop'] = try_set(
            obj=inputs_to_drop,
            none_acceptable=True,
            is_of_type=list)
    if outputs_to_drop is not None:
        inputs['OutputsToDrop'] = try_set(
            obj=outputs_to_drop,
            none_acceptable=True,
            is_of_type=list)
    if model is not None:
        inputs['Model'] = try_set(
            obj=model,
            none_acceptable=True,
            is_of_type=str)
    if onnx_version is not None:
        inputs['OnnxVersion'] = try_set(
            obj=onnx_version,
            none_acceptable=True,
            is_of_type=str,
            values=[
                'Stable',
                'Experimental'])
    if predictive_model is not None:
        inputs['PredictiveModel'] = try_set(
            obj=predictive_model, none_acceptable=True, is_of_type=str)

    input_variables = {
        x for x in unlist(inputs.values())
        if isinstance(x, str) and x.startswith("$")}
    output_variables = {
        x for x in unlist(outputs.values())
        if isinstance(x, str) and x.startswith("$")}

    entrypoint = EntryPoint(
        name=entrypoint_name, inputs=inputs, outputs=outputs,
        input_variables=input_variables,
        output_variables=output_variables)
    return entrypoint
