# - Generated by tools/entrypoint_compiler.py: do not edit by hand
"""
Transforms.RollingWindow
"""

import numbers

from ..utils.entrypoints import EntryPoint
from ..utils.utils import try_set, unlist


def transforms_rollingwindow(
        grain_columns,
        column,
        data,
        output_data=None,
        model=None,
        horizon=0,
        max_window_size=0,
        min_window_size=1,
        window_calculation='0',
        **params):
    """
    **Description**
        Performs a calculation over a rolling timeseries window

    :param grain_columns: List of grain columns (inputs).
    :param column: New column definition (optional form: name:src)
        (inputs).
    :param data: Input dataset (inputs).
    :param horizon: Maximum horizon value (inputs).
    :param max_window_size: Maximum window size (inputs).
    :param min_window_size: Minimum window size (inputs).
    :param window_calculation: What window calculation to use
        (inputs).
    :param output_data: Transformed dataset (outputs).
    :param model: Transform model (outputs).
    """

    entrypoint_name = 'Transforms.RollingWindow'
    inputs = {}
    outputs = {}

    if grain_columns is not None:
        inputs['GrainColumns'] = try_set(
            obj=grain_columns,
            none_acceptable=False,
            is_of_type=list,
            is_column=True)
    if column is not None:
        inputs['Column'] = try_set(
            obj=column,
            none_acceptable=False,
            is_of_type=list,
            is_column=True)
    if data is not None:
        inputs['Data'] = try_set(
            obj=data,
            none_acceptable=False,
            is_of_type=str)
    if horizon is not None:
        inputs['Horizon'] = try_set(
            obj=horizon,
            none_acceptable=False,
            is_of_type=numbers.Real)
    if max_window_size is not None:
        inputs['MaxWindowSize'] = try_set(
            obj=max_window_size,
            none_acceptable=False,
            is_of_type=numbers.Real)
    if min_window_size is not None:
        inputs['MinWindowSize'] = try_set(
            obj=min_window_size,
            none_acceptable=False,
            is_of_type=numbers.Real)
    if window_calculation is not None:
        inputs['WindowCalculation'] = try_set(
            obj=window_calculation,
            none_acceptable=False,
            is_of_type=str,
            values=[
                'Mean',
                'Min',
                'Max'])
    if output_data is not None:
        outputs['OutputData'] = try_set(
            obj=output_data,
            none_acceptable=False,
            is_of_type=str)
    if model is not None:
        outputs['Model'] = try_set(
            obj=model,
            none_acceptable=False,
            is_of_type=str)

    input_variables = {
        x for x in unlist(inputs.values())
        if isinstance(x, str) and x.startswith("$")}
    output_variables = {
        x for x in unlist(outputs.values())
        if isinstance(x, str) and x.startswith("$")}

    entrypoint = EntryPoint(
        name=entrypoint_name, inputs=inputs, outputs=outputs,
        input_variables=input_variables,
        output_variables=output_variables)
    return entrypoint
