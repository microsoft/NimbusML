# - Generated by tools/entrypoint_compiler.py: do not edit by hand
"""
NGramHash
"""

import numbers

from ..utils.entrypoints import Component
from ..utils.utils import try_set


def n_gram_hash(
        number_of_bits=16,
        ngram_length=1,
        skip_length=0,
        all_lengths=True,
        seed=314489979,
        ordered=True,
        maximum_number_of_inverts=0,
        **params):
    """
    **Description**
        Extracts NGrams from text and convert them to vector using hashing
        trick.

    :param number_of_bits: Number of bits to hash into. Must be
        between 1 and 30, inclusive. (settings).
    :param ngram_length: Ngram length (settings).
    :param skip_length: Maximum number of tokens to skip when
        constructing an n-gram (settings).
    :param all_lengths: Whether to include all n-gram lengths up to
        ngramLength or only ngramLength (settings).
    :param seed: Hashing seed (settings).
    :param ordered: Whether the position of each source column should
        be included in the hash (when there are multiple source
        columns). (settings).
    :param maximum_number_of_inverts: Limit the number of keys used
        to generate the slot name to this many. 0 means no invert
        hashing, -1 means no limit. (settings).
    """

    entrypoint_name = 'NGramHash'
    settings = {}

    if number_of_bits is not None:
        settings['NumberOfBits'] = try_set(
            obj=number_of_bits,
            none_acceptable=True,
            is_of_type=numbers.Real)
    if ngram_length is not None:
        settings['NgramLength'] = try_set(
            obj=ngram_length,
            none_acceptable=True,
            is_of_type=numbers.Real)
    if skip_length is not None:
        settings['SkipLength'] = try_set(
            obj=skip_length,
            none_acceptable=True,
            is_of_type=numbers.Real)
    if all_lengths is not None:
        settings['AllLengths'] = try_set(
            obj=all_lengths,
            none_acceptable=True,
            is_of_type=bool)
    if seed is not None:
        settings['Seed'] = try_set(
            obj=seed,
            none_acceptable=True,
            is_of_type=numbers.Real)
    if ordered is not None:
        settings['Ordered'] = try_set(
            obj=ordered, none_acceptable=True, is_of_type=bool)
    if maximum_number_of_inverts is not None:
        settings['MaximumNumberOfInverts'] = try_set(
            obj=maximum_number_of_inverts,
            none_acceptable=True,
            is_of_type=numbers.Real)

    component = Component(
        name=entrypoint_name,
        settings=settings,
        kind='NgramExtractor')
    return component
