# - Generated by tools/entrypoint_compiler.py: do not edit by hand
"""
Transforms.TensorFlowScorer
"""

import numbers

from ..utils.entrypoints import EntryPoint
from ..utils.utils import try_set, unlist


def transforms_tensorflowscorer(
        model_location,
        input_columns,
        data,
        output_columns,
        output_data=None,
        model=None,
        batch_size=64,
        add_batch_dimension_inputs=False,
        **params):
    """
    **Description**
        Transforms the data using the TensorFlow model.

    :param model_location: TensorFlow model used by the transform.
        Please see https://www.tensorflow.org/mobile/prepare_models
        for more details. (inputs).
    :param input_columns: The names of the model inputs (inputs).
    :param data: Input dataset (inputs).
    :param output_columns: The name of the outputs (inputs).
    :param batch_size: Number of samples to use for mini-batch
        training. (inputs).
    :param add_batch_dimension_inputs: Add a batch dimension to the
        input e.g. input = [224, 224, 3] => [-1, 224, 224, 3].
        (inputs).
    :param output_data: Transformed dataset (outputs).
    :param model: Transform model (outputs).
    """

    entrypoint_name = 'Transforms.TensorFlowScorer'
    inputs = {}
    outputs = {}

    if model_location is not None:
        inputs['ModelLocation'] = try_set(
            obj=model_location,
            none_acceptable=False,
            is_of_type=str)
    if input_columns is not None:
        inputs['InputColumns'] = try_set(
            obj=input_columns,
            none_acceptable=False,
            is_of_type=list)
    if data is not None:
        inputs['Data'] = try_set(
            obj=data,
            none_acceptable=False,
            is_of_type=str)
    if output_columns is not None:
        inputs['OutputColumns'] = try_set(
            obj=output_columns,
            none_acceptable=False,
            is_of_type=list)
    if batch_size is not None:
        inputs['BatchSize'] = try_set(
            obj=batch_size,
            none_acceptable=True,
            is_of_type=numbers.Real)
    if add_batch_dimension_inputs is not None:
        inputs['AddBatchDimensionInputs'] = try_set(
            obj=add_batch_dimension_inputs,
            none_acceptable=True,
            is_of_type=bool)
    if output_data is not None:
        outputs['OutputData'] = try_set(
            obj=output_data,
            none_acceptable=False,
            is_of_type=str)
    if model is not None:
        outputs['Model'] = try_set(
            obj=model,
            none_acceptable=False,
            is_of_type=str)

    input_variables = {
        x for x in unlist(inputs.values())
        if isinstance(x, str) and x.startswith("$")}
    output_variables = {
        x for x in unlist(outputs.values())
        if isinstance(x, str) and x.startswith("$")}

    entrypoint = EntryPoint(
        name=entrypoint_name, inputs=inputs, outputs=outputs,
        input_variables=input_variables,
        output_variables=output_variables)
    return entrypoint
