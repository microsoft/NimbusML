# - Generated by tools/entrypoint_compiler.py: do not edit by hand
"""
Transforms.DateTimeSplitter
"""


from ..utils.entrypoints import EntryPoint
from ..utils.utils import try_set, unlist


def transforms_datetimesplitter(
        source,
        data,
        prefix,
        output_data=None,
        model=None,
        country='None',
        **params):
    """
    **Description**
        Splits a date time value into each individual component

    :param source: Input column (inputs).
    :param data: Input dataset (inputs).
    :param prefix: Output column prefix (inputs).
    :param country: Country to get holidays for. Defaults to none if
        not passed (inputs).
    :param output_data: Transformed dataset (outputs).
    :param model: Transform model (outputs).
    """

    entrypoint_name = 'Transforms.DateTimeSplitter'
    inputs = {}
    outputs = {}

    if source is not None:
        inputs['Source'] = try_set(
            obj=source,
            none_acceptable=False,
            is_of_type=str,
            is_column=True)
    if data is not None:
        inputs['Data'] = try_set(
            obj=data,
            none_acceptable=False,
            is_of_type=str)
    if prefix is not None:
        inputs['Prefix'] = try_set(
            obj=prefix,
            none_acceptable=False,
            is_of_type=str)
    if country is not None:
        inputs['Country'] = try_set(
            obj=country,
            none_acceptable=True,
            is_of_type=str,
            values=[
                'None',
                'Argentina',
                'Australia',
                'Austria',
                'Belarus',
                'Belgium',
                'Brazil',
                'Canada',
                'Colombia',
                'Croatia',
                'Czech',
                'Denmark',
                'England',
                'Finland',
                'France',
                'Germany',
                'Hungary',
                'India',
                'Ireland',
                'IsleofMan',
                'Italy',
                'Japan',
                'Mexico',
                'Netherlands',
                'NewZealand',
                'NorthernIreland',
                'Norway',
                'Poland',
                'Portugal',
                'Scotland',
                'Slovenia',
                'SouthAfrica',
                'Spain',
                'Sweden',
                'Switzerland',
                'Ukraine',
                'UnitedKingdom',
                'UnitedStates',
                'Wales'])
    if output_data is not None:
        outputs['OutputData'] = try_set(
            obj=output_data,
            none_acceptable=False,
            is_of_type=str)
    if model is not None:
        outputs['Model'] = try_set(
            obj=model,
            none_acceptable=False,
            is_of_type=str)

    input_variables = {
        x for x in unlist(inputs.values())
        if isinstance(x, str) and x.startswith("$")}
    output_variables = {
        x for x in unlist(outputs.values())
        if isinstance(x, str) and x.startswith("$")}

    entrypoint = EntryPoint(
        name=entrypoint_name, inputs=inputs, outputs=outputs,
        input_variables=input_variables,
        output_variables=output_variables)
    return entrypoint
