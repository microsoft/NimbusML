# - Generated by tools/entrypoint_compiler.py: do not edit by hand
"""
Transforms.ImagePixelExtractor
"""

import numbers

from ..utils.entrypoints import EntryPoint
from ..utils.utils import try_set, unlist


def transforms_imagepixelextractor(
        column,
        data,
        output_data=None,
        model=None,
        use_alpha=False,
        use_red=True,
        use_green=True,
        use_blue=True,
        order='ARGB',
        interleave=False,
        convert=True,
        offset=None,
        scale=None,
        **params):
    """
    **Description**
        Extract color plane(s) from an image. Options include scaling, offset
        and conversion to floating point.

    :param column: New column definition(s) (optional form: name:src)
        (inputs).
    :param data: Input dataset (inputs).
    :param use_alpha: Whether to use alpha channel (inputs).
    :param use_red: Whether to use red channel (inputs).
    :param use_green: Whether to use green channel (inputs).
    :param use_blue: Whether to use blue channel (inputs).
    :param order: Order of colors. (inputs).
    :param interleave: Whether to separate each channel or interleave
        in specified order (inputs).
    :param convert: Whether to convert to floating point (inputs).
    :param offset: Offset (pre-scale) (inputs).
    :param scale: Scale factor (inputs).
    :param output_data: Transformed dataset (outputs).
    :param model: Transform model (outputs).
    """

    entrypoint_name = 'Transforms.ImagePixelExtractor'
    inputs = {}
    outputs = {}

    if column is not None:
        inputs['Column'] = try_set(
            obj=column,
            none_acceptable=False,
            is_of_type=list,
            is_column=True)
    if data is not None:
        inputs['Data'] = try_set(
            obj=data,
            none_acceptable=False,
            is_of_type=str)
    if use_alpha is not None:
        inputs['UseAlpha'] = try_set(
            obj=use_alpha,
            none_acceptable=True,
            is_of_type=bool)
    if use_red is not None:
        inputs['UseRed'] = try_set(
            obj=use_red,
            none_acceptable=True,
            is_of_type=bool)
    if use_green is not None:
        inputs['UseGreen'] = try_set(
            obj=use_green,
            none_acceptable=True,
            is_of_type=bool)
    if use_blue is not None:
        inputs['UseBlue'] = try_set(
            obj=use_blue,
            none_acceptable=True,
            is_of_type=bool)
    if order is not None:
        inputs['Order'] = try_set(
            obj=order,
            none_acceptable=True,
            is_of_type=str,
            values=[
                'ARGB',
                'ARBG',
                'ABRG',
                'ABGR',
                'AGRB',
                'AGBR'])
    if interleave is not None:
        inputs['Interleave'] = try_set(
            obj=interleave,
            none_acceptable=True,
            is_of_type=bool)
    if convert is not None:
        inputs['Convert'] = try_set(
            obj=convert,
            none_acceptable=True,
            is_of_type=bool)
    if offset is not None:
        inputs['Offset'] = try_set(
            obj=offset,
            none_acceptable=True,
            is_of_type=numbers.Real)
    if scale is not None:
        inputs['Scale'] = try_set(
            obj=scale,
            none_acceptable=True,
            is_of_type=numbers.Real)
    if output_data is not None:
        outputs['OutputData'] = try_set(
            obj=output_data,
            none_acceptable=False,
            is_of_type=str)
    if model is not None:
        outputs['Model'] = try_set(
            obj=model,
            none_acceptable=False,
            is_of_type=str)

    input_variables = {
        x for x in unlist(inputs.values())
        if isinstance(x, str) and x.startswith("$")}
    output_variables = {
        x for x in unlist(outputs.values())
        if isinstance(x, str) and x.startswith("$")}

    entrypoint = EntryPoint(
        name=entrypoint_name, inputs=inputs, outputs=outputs,
        input_variables=input_variables,
        output_variables=output_variables)
    return entrypoint
