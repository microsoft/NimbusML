# - Generated by tools/entrypoint_compiler.py: do not edit by hand
"""
Transforms.LagLeadOperator
"""

import numbers

from ..utils.entrypoints import EntryPoint
from ..utils.utils import try_set, unlist


def transforms_lagleadoperator(
        grain_columns,
        column,
        data,
        offsets,
        output_data=None,
        model=None,
        horizon=0,
        **params):
    """
    **Description**
        Uses the offset list with the horizon to create lags and leads

    :param grain_columns: List of grain columns (inputs).
    :param column: New column definition (optional form: name:src)
        (inputs).
    :param data: Input dataset (inputs).
    :param horizon: Maximum horizon value (inputs).
    :param offsets: Lag and Lead offset to use. A negative number is
        a lag, positive is a lead (inputs).
    :param output_data: Transformed dataset (outputs).
    :param model: Transform model (outputs).
    """

    entrypoint_name = 'Transforms.LagLeadOperator'
    inputs = {}
    outputs = {}

    if grain_columns is not None:
        inputs['GrainColumns'] = try_set(
            obj=grain_columns,
            none_acceptable=False,
            is_of_type=list,
            is_column=True)
    if column is not None:
        inputs['Column'] = try_set(
            obj=column,
            none_acceptable=False,
            is_of_type=list,
            is_column=True)
    if data is not None:
        inputs['Data'] = try_set(
            obj=data,
            none_acceptable=False,
            is_of_type=str)
    if horizon is not None:
        inputs['Horizon'] = try_set(
            obj=horizon,
            none_acceptable=False,
            is_of_type=numbers.Real)
    if offsets is not None:
        inputs['Offsets'] = try_set(
            obj=offsets,
            none_acceptable=False,
            is_of_type=list)
    if output_data is not None:
        outputs['OutputData'] = try_set(
            obj=output_data,
            none_acceptable=False,
            is_of_type=str)
    if model is not None:
        outputs['Model'] = try_set(
            obj=model,
            none_acceptable=False,
            is_of_type=str)

    input_variables = {
        x for x in unlist(inputs.values())
        if isinstance(x, str) and x.startswith("$")}
    output_variables = {
        x for x in unlist(outputs.values())
        if isinstance(x, str) and x.startswith("$")}

    entrypoint = EntryPoint(
        name=entrypoint_name, inputs=inputs, outputs=outputs,
        input_variables=input_variables,
        output_variables=output_variables)
    return entrypoint
