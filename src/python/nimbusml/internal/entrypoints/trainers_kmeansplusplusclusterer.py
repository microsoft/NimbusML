# - Generated by tools/entrypoint_compiler.py: do not edit by hand
"""
Trainers.KMeansPlusPlusClusterer
"""

import numbers

from ..utils.entrypoints import EntryPoint
from ..utils.utils import try_set, unlist


def trainers_kmeansplusplusclusterer(
        training_data,
        predictor_model=None,
        feature_column_name='Features',
        example_weight_column_name=None,
        normalize_features='Auto',
        caching='Auto',
        k=5,
        number_of_threads=None,
        initialization_algorithm='KMeansYinyang',
        opt_tol=1e-07,
        maximum_number_of_iterations=1000,
        accel_mem_budget_mb=4096,
        **params):
    """
    **Description**
        K-means is a popular clustering algorithm. With K-means, the data is
        clustered into a specified number of clusters in order to
        minimize the within-cluster sum of squares. K-means++
        improves upon K-means by using a better method for choosing
        the initial cluster centers.

    :param training_data: The data to be used for training (inputs).
    :param feature_column_name: Column to use for features (inputs).
    :param example_weight_column_name: Column to use for example
        weight (inputs).
    :param normalize_features: Normalize option for the feature
        column (inputs).
    :param caching: Whether trainer should cache input training data
        (inputs).
    :param k: The number of clusters (inputs).
    :param number_of_threads: Degree of lock-free parallelism.
        Defaults to automatic. Determinism not guaranteed. (inputs).
    :param initialization_algorithm: Cluster initialization algorithm
        (inputs).
    :param opt_tol: Tolerance parameter for trainer convergence. Low
        = slower, more accurate (inputs).
    :param maximum_number_of_iterations: Maximum number of
        iterations. (inputs).
    :param accel_mem_budget_mb: Memory budget (in MBs) to use for
        KMeans acceleration (inputs).
    :param predictor_model: The trained model (outputs).
    """

    entrypoint_name = 'Trainers.KMeansPlusPlusClusterer'
    inputs = {}
    outputs = {}

    if training_data is not None:
        inputs['TrainingData'] = try_set(
            obj=training_data,
            none_acceptable=False,
            is_of_type=str)
    if feature_column_name is not None:
        inputs['FeatureColumnName'] = try_set(
            obj=feature_column_name,
            none_acceptable=True,
            is_of_type=str,
            is_column=True)
    if example_weight_column_name is not None:
        inputs['ExampleWeightColumnName'] = try_set(
            obj=example_weight_column_name,
            none_acceptable=True,
            is_of_type=str,
            is_column=True)
    if normalize_features is not None:
        inputs['NormalizeFeatures'] = try_set(
            obj=normalize_features,
            none_acceptable=True,
            is_of_type=str,
            values=[
                'No',
                'Warn',
                'Auto',
                'Yes'])
    if caching is not None:
        inputs['Caching'] = try_set(
            obj=caching,
            none_acceptable=True,
            is_of_type=str,
            values=[
                'Auto',
                'Memory',
                'None'])
    if k is not None:
        inputs['K'] = try_set(
            obj=k,
            none_acceptable=True,
            is_of_type=numbers.Real)
    if number_of_threads is not None:
        inputs['NumberOfThreads'] = try_set(
            obj=number_of_threads,
            none_acceptable=True,
            is_of_type=numbers.Real)
    if initialization_algorithm is not None:
        inputs['InitializationAlgorithm'] = try_set(
            obj=initialization_algorithm,
            none_acceptable=True,
            is_of_type=str,
            values=[
                'KMeansPlusPlus',
                'Random',
                'KMeansYinyang'])
    if opt_tol is not None:
        inputs['OptTol'] = try_set(
            obj=opt_tol,
            none_acceptable=True,
            is_of_type=numbers.Real)
    if maximum_number_of_iterations is not None:
        inputs['MaximumNumberOfIterations'] = try_set(
            obj=maximum_number_of_iterations,
            none_acceptable=True,
            is_of_type=numbers.Real)
    if accel_mem_budget_mb is not None:
        inputs['AccelMemBudgetMb'] = try_set(
            obj=accel_mem_budget_mb,
            none_acceptable=True,
            is_of_type=numbers.Real)
    if predictor_model is not None:
        outputs['PredictorModel'] = try_set(
            obj=predictor_model, none_acceptable=False, is_of_type=str)

    input_variables = {
        x for x in unlist(inputs.values())
        if isinstance(x, str) and x.startswith("$")}
    output_variables = {
        x for x in unlist(outputs.values())
        if isinstance(x, str) and x.startswith("$")}

    entrypoint = EntryPoint(
        name=entrypoint_name, inputs=inputs, outputs=outputs,
        input_variables=input_variables,
        output_variables=output_variables)
    return entrypoint
