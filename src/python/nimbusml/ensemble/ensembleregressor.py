# --------------------------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License.
# --------------------------------------------------------------------------------------------
# - Generated by tools/entrypoint_compiler.py: do not edit by hand
"""
EnsembleRegressor
"""

__all__ = ["EnsembleRegressor"]


from sklearn.base import RegressorMixin

from ..base_predictor import BasePredictor
from ..internal.core.ensemble.ensembleregressor import \
    EnsembleRegressor as core
from ..internal.utils.utils import trace
from .feature_selector import AllFeatureSelector
from .subset_selector import BootstrapSelector


class EnsembleRegressor(core, BasePredictor, RegressorMixin):
    """
    **Description**
        Train regression ensemble.

    :param feature: see `Columns </nimbusml/concepts/columns>`_.

    :param label: see `Columns </nimbusml/concepts/columns>`_.

    :param sampling_type: Sampling Type.

    :param num_models: Number of models per batch. If not specified, will
        default to 50 if there is only one base predictor, or the number of
        base predictors otherwise.

    :param sub_model_selector_type: Algorithm to prune the base learners for
        selective Ensemble.

    :param output_combiner: Output combiner.

    :param normalize: If ``Auto``, the choice to normalize depends on the
        preference declared by the algorithm. This is the default choice. If
        ``No``, no normalization is performed. If ``Yes``, normalization always
        performed. If ``Warn``, if normalization is needed by the algorithm, a
        warning message is displayed but normalization is not performed. If
        normalization is performed, a ``MaxMin`` normalizer is used. This
        normalizer preserves sparsity by mapping zero to zero.

    :param caching: Whether trainer should cache input training data.

    :param train_parallel: All the base learners will run asynchronously if the
        value is true.

    :param batch_size: Batch size.

    :param show_metrics: True, if metrics for each model need to be evaluated
        and shown in comparison table. This is done by using validation set if
        available or the training set.

    :param params: Additional arguments sent to compute engine.

    """

    @trace
    def __init__(
            self,
            sampling_type=BootstrapSelector(
                feature_selector=AllFeatureSelector()),
            num_models=None,
            sub_model_selector_type=None,
            output_combiner=None,
            normalize='Auto',
            caching='Auto',
            train_parallel=False,
            batch_size=-1,
            show_metrics=False,
            feature=None,
            label=None,
            **params):

        if 'feature_column_name' in params:
            raise NameError(
                "'feature_column_name' must be renamed to 'feature'")
        if feature:
            params['feature_column_name'] = feature
        if 'label_column_name' in params:
            raise NameError(
                "'label_column_name' must be renamed to 'label'")
        if label:
            params['label_column_name'] = label
        BasePredictor.__init__(self, type='regressor', **params)
        core.__init__(
            self,
            sampling_type=sampling_type,
            num_models=num_models,
            sub_model_selector_type=sub_model_selector_type,
            output_combiner=output_combiner,
            normalize=normalize,
            caching=caching,
            train_parallel=train_parallel,
            batch_size=batch_size,
            show_metrics=show_metrics,
            **params)
        self.feature = feature
        self.label = label

    def get_params(self, deep=False):
        """
        Get the parameters for this operator.
        """
        return core.get_params(self)
