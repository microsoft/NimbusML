# --------------------------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License.
# --------------------------------------------------------------------------------------------
# - Generated by tools/entrypoint_compiler.py: do not edit by hand
"""
RegressorBestPerformanceSelector
"""

__all__ = ["RegressorBestPerformanceSelector"]


from ...internal.core.ensemble.sub_model_selector.regressorbestperformanceselector import \
    RegressorBestPerformanceSelector as core
from ...internal.utils.utils import trace


class RegressorBestPerformanceSelector(core):
    """

    **Description**
    Computes the weighted average of the outputs of the trained models


    :param metric_name: the metric type to be used to find the weights for
        each model. Can be ``"L1"``, ``"L2"``, ``"Rms"``, or ``"Loss"``, or
        ``"RSquared"``.

    :param learners_selection_proportion: The proportion of best base learners
        to be selected. The range is 0.0-1.0.

    :param validation_dataset_proportion: The proportion of instances to be
        selected to test the individual base learner. If it is 0, it uses
        training set.

    :param params: Additional arguments sent to compute engine.

    .. seealso::
        :py:class:`EnsembleRegressor
        <nimbusml.ensemble.EnsembleRegressor>`

        * Submodel selectors:
        :py:class:`RegressorAllSelector
        <nimbusml.ensemble.sub_model_selector.RegressorAllSelector>`,
        :py:class:`RegressorBestDiverseSelector
        <nimbusml.ensemble.sub_model_selector.RegressorBestDiverseSelector>`

        * Output combiners:
        :py:class:`RegressorAverage
        <nimbusml.ensemble.output_combiner.RegressorAverage>`,
        :py:class:`RegressorMedian
        <nimbusml.ensemble.output_combiner.RegressorMedian>`,
        :py:class:`RegressorStacking
        <nimbusml.ensemble.output_combiner.RegressorStacking>`


    .. index:: models, ensemble, regression

    """

    @trace
    def __init__(
            self,
            metric_name='L1',
            learners_selection_proportion=0.5,
            validation_dataset_proportion=0.3,
            **params):
        core.__init__(
            self,
            metric_name=metric_name,
            learners_selection_proportion=learners_selection_proportion,
            validation_dataset_proportion=validation_dataset_proportion,
            **params)

    def get_params(self, deep=False):
        """
        Get the parameters for this operator.
        """
        return core.get_params(self)
