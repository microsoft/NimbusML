# --------------------------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License.
# --------------------------------------------------------------------------------------------
# - Generated by tools/entrypoint_compiler.py: do not edit by hand
"""
OneHotHashVectorizer
"""

__all__ = ["OneHotHashVectorizer"]


from sklearn.base import TransformerMixin

from ...base_transform import BaseTransform
from ...internal.core.feature_extraction.categorical.onehothashvectorizer \
    import OneHotHashVectorizer as core
from ...internal.utils.utils import trace


class OneHotHashVectorizer(core, BaseTransform, TransformerMixin):
    """

    Categorical hash transform that can be performed on data before
    training a model.


    .. remarks::
        ``OneHotHashVectorizer`` converts a categorical value into an
        indicator
        array by hashing the value and using the hash as an index in the bag.
        If
        the input column is a vector, a single indicator bag is returned for
        it.
        ``OneHotHashVectorizer`` does not currently support handling factor
        data.

    :param columns: a dictionary of key-value pairs, where key is the output
        column name and value is the input column name.

        * Multiple key-value pairs are allowed.
        * Input column type: string.
        * Output column type:
         `Vector Type </nimbusml/concepts/types#vectortype-column>`_.
        * If the output column names are same as the input column names, then
        simply specify ``columns`` names as a list of strings.

        The << operator can be used to set this value (see
        `Column Operator </nimbusml/concepts/columns>`_)

        For example
         * OneHotHashVectorizer(columns={'out1':'input1', 'out2':'input2'})
         * OneHotHashVectorizer() << {'out1':'input1', 'out2':'input2'}

        For more details see `Columns </nimbusml/concepts/columns>`_.

    :param number_of_bits: An integer specifying the number of bits to hash into.
        Must be between 1 and 30, inclusive. The default value is 16.

    :param output_kind: A character string that specifies the kind
        of output kind.

        * ``"Bag"``: Outputs a multi-set vector. If the input column is a
          vector of categories, the output contains one vector, where the
        value in
          each slot is the number of occurrences of the category in the input
          vector. If the input column contains a single category, the
        indicator
          vector and the bag vector are equivalent
        * ``"Ind"``: Outputs an indicator vector. The input column is a
        vector
          of categories, and the output contains one indicator vector per
        slot in
          the input column.
        * ``"Key``: Outputs an index. The output is an integer id (between
          1 and the number of categories in the dictionary) of the category.
        * ``"Bin``: Outputs a vector which is the binary representation of
        the category.

        The default value is ``"Bag"``.

    :param random_state: An integer specifying the hashing seed. The default
        value is
        314489979.

    :param ordered: ``True`` to include the position of each term in the
        hash. Otherwise, ``False``. The default value is ``True``.

    :param maximum_number_of_inverts: An integer specifying the limit on the number of keys
        that can be used to generate the slot name. ``0`` means no invert
        hashing; ``-1`` means no limit. While a zero value gives better
        performance, a non-zero value is needed to get meaningful coefficent
        names.
        The default value is ``0``.

    :param params: Additional arguments sent to compute engine.

    .. seealso::
        :py:class:`OneHotVectorizer
        <nimbusml.feature_extraction.categorical.OneHotVectorizer>`

    .. index:: transform, catagory, hash

    Example:
       .. literalinclude:: /../nimbusml/examples/OneHotHashVectorizer.py
              :language: python
    """

    @trace
    def __init__(
            self,
            number_of_bits=16,
            output_kind='Bag',
            random_state=314489979,
            ordered=True,
            maximum_number_of_inverts=0,
            columns=None,
            **params):

        if columns:
            params['columns'] = columns
        BaseTransform.__init__(self, **params)
        core.__init__(
            self,
            number_of_bits=number_of_bits,
            output_kind=output_kind,
            random_state=random_state,
            ordered=ordered,
            maximum_number_of_inverts=maximum_number_of_inverts,
            **params)
        self._columns = columns

    def get_params(self, deep=False):
        """
        Get the parameters for this operator.
        """
        return core.get_params(self)
