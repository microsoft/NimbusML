# --------------------------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License.
# --------------------------------------------------------------------------------------------
# - Generated by tools/entrypoint_compiler.py: do not edit by hand
"""
SsaForecaster
"""

__all__ = ["SsaForecaster"]


from sklearn.base import TransformerMixin

from ..base_transform import BaseTransform
from ..internal.core.timeseries.ssaforecaster import SsaForecaster as core
from ..internal.utils.utils import trace


class SsaForecaster(core, BaseTransform, TransformerMixin):
    """
    **Description**
        This transform forecasts using Singular Spectrum Analysis (SSA).

    :param columns: see `Columns </nimbusml/concepts/columns>`_.

    :param confidence: The confidence for spike detection in the range [0,
        100].

    :param window_size: Window size.

    :param series_length: Series length.

    :param train_size: Train size.

    :param discount_factor: The discount factor in [0, 1].

    :param is_adaptive: The flag determing whether the model is adaptive.

    :param params: Additional arguments sent to compute engine.

    """

    @trace
    def __init__(
            self,
            confidence=99.0,
            window_size=10,
            series_length=20,
            train_size=100,
            discount_factor=1.0,
            is_adaptive=False,
            columns=None,
            **params):

        if columns:
            params['columns'] = columns
        BaseTransform.__init__(self, **params)
        core.__init__(
            self,
            confidence=confidence,
            window_size=window_size,
            series_length=series_length,
            train_size=train_size,
            discount_factor=discount_factor,
            is_adaptive=is_adaptive,
            **params)
        self._columns = columns

    def get_params(self, deep=False):
        """
        Get the parameters for this operator.
        """
        return core.get_params(self)

    def _nodes_with_presteps(self):
        """
        Inserts preprocessing before this one.
        """
        from ..preprocessing.schema import TypeConverter
        return [
            TypeConverter(
                result_type='R4')._steal_io(self),
            self]
