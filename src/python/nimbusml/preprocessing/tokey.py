# --------------------------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License.
# --------------------------------------------------------------------------------------------
# - Generated by tools/entrypoint_compiler.py: do not edit by hand
"""
ToKey
"""

__all__ = ["ToKey"]


from sklearn.base import TransformerMixin

from ..base_transform import BaseTransform
from ..internal.core.preprocessing.tokey import ToKey as core
from ..internal.utils.utils import trace


class ToKey(core, BaseTransform, TransformerMixin):
    """

    Text transforms that can be performed on data before training
    a model.

    .. remarks::
        The ``ToKey`` transform converts a column of text to key values
        using a dictionary. This operation can be reversed by using
        :py:class:`FromKey <nimbusml.preprocessing.FromKey>` to obtain the
        orginal values.

    :param columns: a dictionary of key-value pairs, where key is the output
        column name and value is the input column name.

        * Multiple key-value pairs are allowed.
        * Input column type: numeric or string.
        * Output column type:
         `Key Type </nimbusml/concepts/types#keytype-columns>`_.
        * If the output column names are same as the input column names, then
        simply specify ``columns`` as a list of strings.

        The << operator can be used to set this value (see
        `Column Operator </nimbusml/concepts/columns>`_)

        For example
         * ToKey(columns={'out1':'input1', 'out2':'input2'})
         * ToKey() << {'out1':'input1', 'out2':'input2'}

        For more details see `Columns </nimbusml/concepts/columns>`_.

    :param max_num_terms: Maximum number of keys to keep per column when auto-
        training.

    :param term: List of terms.

    :param sort: How items should be ordered when vectorized. By default, they
        will be in the order encountered. If by value items are sorted
        according to their default comparison, for example, text sorting will
        be case sensitive (for example, 'A' then 'Z' then 'a').

    :param text_key_values: Whether key value metadata should be text,
        regardless of the actual input type.

    :param params: Additional arguments sent to compute engine.

    .. seealso::
        :py:class:`FromKey <nimbusml.preprocessing.FromKey>`,
        :py:class:`OneHotHashVectorizer
        <nimbusml.feature_extraction.categorical.OneHotHashVectorizer>`,
        :py:class:`OneHotVectorizer
        <nimbusml.feature_extraction.categorical.OneHotVectorizer>`,
        :py:class:`NGramFeaturizer
        <nimbusml.feature_extraction.text.NGramFeaturizer>`.

    .. index:: transform, preprocessing, text

    Example:
       .. literalinclude:: /../nimbusml/examples/ToKey.py
              :language: python
    """

    @trace
    def __init__(
            self,
            max_num_terms=1000000,
            term=None,
            sort='ByOccurrence',
            text_key_values=False,
            columns=None,
            **params):

        if columns:
            params['columns'] = columns
        BaseTransform.__init__(self, **params)
        core.__init__(
            self,
            max_num_terms=max_num_terms,
            term=term,
            sort=sort,
            text_key_values=text_key_values,
            **params)
        self._columns = columns

    def get_params(self, deep=False):
        """
        Get the parameters for this operator.
        """
        return core.get_params(self)
