# --------------------------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License.
# --------------------------------------------------------------------------------------------
# - Generated by tools/entrypoint_compiler.py: do not edit by hand
"""
Handler
"""

__all__ = ["Handler"]


from sklearn.base import TransformerMixin

from ...base_transform import BaseTransform
from ...internal.core.preprocessing.missing_values.handler import \
    Handler as core
from ...internal.utils.utils import trace


class Handler(core, BaseTransform, TransformerMixin):
    """

    Replace NaN values in a column with imputed values.

    .. remarks::
        ``Handler`` is a combination of :py:class:`Filter
        <nimbusml.preprocessing.missing_values.Filter>` and :py:class:`Indicator
        <nimbusml.preprocessing.missing_values.Indicator>`. It creates two
        columns, one
        containing the imputed values as specified by ``replace_with``
        argument,
        and the second column containing indicator values of which rows
        entries
        were imputed. This works for columns that have numeric type.

    :param columns: a dictionary of key-value pairs, where key is the output
        column name and value is the input column name.

        * Multiple key-value pairs are allowed.
        * Input column type: numeric.
        * Output column type:
         `Vector Type </nimbusml/concepts/types#vectortype-column>`_.
        * If the output column names are same as the input column names, then
        simply specify ``columns`` as a list of strings.

        The << operator can be used to set this value (see
        `Column Operator </nimbusml/concepts/columns>`_)

        For example
         * Handler(columns={'out1':'input1', 'out2':'input2'})
         * Handler() << {'out1':'input1', 'out2':'input2'}

        For more details see `Columns </nimbusml/concepts/columns>`_.

    :param replace_with: The method to use to replace NaN values. The
    following choices are available.

       * Def: Replace with default value of that type, usually ``0``. If no
        replace
       method is specified, this is the default strategy.
       * Mean: Replace NaN values with the mean of the values in that column.
       * Min: Replace with minimum value in the column.
       * Max: Replace with maximum value in the column.

    :param impute_by_slot: Whether to impute values by slot.

    :param concat: Whether or not to concatenate an indicator vector column to
        the value column.

    :param params: Additional arguments sent to compute engine.

    .. seealso::
        :py:class:`Filter <nimbusml.preprocessing.missing_values.Filter>`,
        :py:class:`Indicator <nimbusml.preprocessing.missing_values.Indicator>`.

    .. index:: handler

    Example:
       .. literalinclude:: /../nimbusml/examples/Handler.py
              :language: python
    """

    @trace
    def __init__(
            self,
            replace_with='DefaultValue',
            impute_by_slot=True,
            concat=True,
            columns=None,
            **params):

        if columns:
            params['columns'] = columns
        BaseTransform.__init__(self, **params)
        core.__init__(
            self,
            replace_with=replace_with,
            impute_by_slot=impute_by_slot,
            concat=concat,
            **params)
        self._columns = columns

    def get_params(self, deep=False):
        """
        Get the parameters for this operator.
        """
        return core.get_params(self)

    def _nodes_with_presteps(self):
        """
        Inserts preprocessing before this one.
        """
        from ..schema import TypeConverter
        return [
            TypeConverter(
                result_type='R4')._steal_io(self),
            self]
