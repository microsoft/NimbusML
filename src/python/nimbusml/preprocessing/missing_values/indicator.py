# --------------------------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License.
# --------------------------------------------------------------------------------------------
# - Generated by tools/entrypoint_compiler.py: do not edit by hand
"""
Indicator
"""

__all__ = ["Indicator"]


from sklearn.base import TransformerMixin

from ...base_transform import BaseTransform
from ...internal.core.preprocessing.missing_values.indicator import \
    Indicator as core
from ...internal.utils.utils import trace


class Indicator(core, BaseTransform, TransformerMixin):
    """

    Create a new column indicating if the input has missing values.

    .. remarks::
        ``Indicator`` creates a new column containing indicator values
        ("True" or "False") of which rows have missing values.

    :param columns: a dictionary of key-value pairs, where key is the output
        column name and value is the input column name.

        * Multiple key-value pairs are allowed.
        * Input column type:
         `Vector Type </nimbusml/concepts/types#vectortype-column>`_.
        * Output column type:
         `Vector Type </nimbusml/concepts/types#vectortype-column>`_.
        * If the output column names are same as the input column names, then
        simply specify ``columns`` as a list of strings.

        The << operator can be used to set this value (see
        `Column Operator </nimbusml/concepts/columns>`_)

        For example
         * Indicator(columns={'out1':'input1', 'out2':'input2'})
         * Indicator() << {'out1':'input1', 'out2':'input2'}

        For more details see `Columns </nimbusml/concepts/columns>`_.

    :param params: Additional arguments sent to compute engine.

    .. seealso::
        :py:class:`Filter <nimbusml.preprocessing.missing_values.Filter>`,
        :py:class:`Handler <nimbusml.preprocessing.missing_values.Handler>`.

    .. index:: filter, image

    Example:
       .. literalinclude:: /../nimbusml/examples/Indicator.py
              :language: python
    """

    @trace
    def __init__(
            self,
            columns=None,
            **params):

        if columns:
            params['columns'] = columns
        BaseTransform.__init__(self, **params)
        core.__init__(
            self,
            **params)
        self._columns = columns

    def get_params(self, deep=False):
        """
        Get the parameters for this operator.
        """
        return core.get_params(self)

    def _nodes_with_presteps(self):
        """
        Inserts preprocessing before this one.
        """
        from ..schema import TypeConverter
        return [
            TypeConverter(
                result_type='R4')._steal_io(self),
            self]
