# --------------------------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License.
# --------------------------------------------------------------------------------------------
# - Generated by tools/entrypoint_compiler.py: do not edit by hand
"""
Filter
"""

__all__ = ["Filter"]


from sklearn.base import TransformerMixin

from ...base_transform import BaseTransform
from ...internal.core.preprocessing.missing_values.filter import Filter as core
from ...internal.utils.utils import trace


class Filter(core, BaseTransform, TransformerMixin):
    """

    Filters all rows where the input columns have value of NaN.

    .. remarks::
        ``Filter`` removes the entire row if any of the input columns have
        value of NaN in that row. This preprocessing is required for many ML
        algorithms that cannot work with NaNs. Useful if any NaN entry
        invalidates the entire row.

    :param columns: a list of strings representing the column names to
        perform the transformation on.

        The << operator can be used to set this value (see
        `Column Operator </nimbusml/concepts/columns>`_)

        For example
         * Filter(columns=['education', 'age'])
         * Filter() << ['education', 'age']

        For more details see `Columns </nimbusml/concepts/columns>`_.

    :param complement: If true, keep only rows that contain NA values, and
        filter the rest.

    :param params: Additional arguments sent to compute engine.

    .. seealso::
        :py:class:`Indicator <nimbusml.preprocessing.missing_values.Indicator>`,
        :py:class:`Handler <nimbusml.preprocessing.missing_values.Handler>`.

    .. index:: filter, image

    Example:
       .. literalinclude:: /../nimbusml/examples/Filter.py
              :language: python
    """

    @trace
    def __init__(
            self,
            complement=False,
            columns=None,
            **params):

        if columns:
            params['columns'] = columns
        BaseTransform.__init__(self, **params)
        core.__init__(
            self,
            complement=complement,
            **params)
        self._columns = columns

    def get_params(self, deep=False):
        """
        Get the parameters for this operator.
        """
        return core.get_params(self)

    def _nodes_with_presteps(self):
        """
        Inserts preprocessing before this one.
        """
        from ..schema import TypeConverter
        return [
            TypeConverter(
                result_type='R4')._steal_io(self),
            self]
