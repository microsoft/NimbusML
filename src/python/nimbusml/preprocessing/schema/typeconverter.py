# --------------------------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License.
# --------------------------------------------------------------------------------------------
# - Generated by tools/entrypoint_compiler.py: do not edit by hand
"""
TypeConverter
"""

__all__ = ["TypeConverter"]


from sklearn.base import TransformerMixin

from ...base_transform import BaseTransform
from ...internal.core.preprocessing.schema.typeconverter import \
    TypeConverter as core
from ...internal.utils.utils import trace


class TypeConverter(core, BaseTransform, TransformerMixin):
    """

    Converts a column to a different type, using standard conversions.

    :param columns: see `Columns </nimbusml/concepts/columns>`_.

    :param result_type: The result type, e.g. 'R4', 'TX'. For more details
        see `Types </nimbusml/concepts/types#column-types>`_.
        Note that the converted type to should
        compatible with the origin.

    :param range: For a key column, this defines the range of values.

    :param params: Additional arguments sent to compute engine.

    .. index:: transform, schema

    Example:
       .. literalinclude:: /../nimbusml/examples/TypeConverter.py
              :language: python
    """

    @trace
    def __init__(
            self,
            result_type=None,
            range=None,
            columns=None,
            **params):

        if columns:
            params['columns'] = columns
        BaseTransform.__init__(self, **params)
        core.__init__(
            self,
            result_type=result_type,
            range=range,
            **params)
        self._columns = columns

    def get_params(self, deep=False):
        """
        Get the parameters for this operator.
        """
        return core.get_params(self)
