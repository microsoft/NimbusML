# --------------------------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License.
# --------------------------------------------------------------------------------------------
# - Generated by tools/entrypoint_compiler.py: do not edit by hand
"""
RangeFilter
"""

__all__ = ["RangeFilter"]


from sklearn.base import TransformerMixin

from ...base_transform import BaseTransform
from ...internal.core.preprocessing.filter.rangefilter import \
    RangeFilter as core
from ...internal.utils.utils import trace


class RangeFilter(core, BaseTransform, TransformerMixin):
    """

    Filters a dataview on a column of type Single, Double or Key
    (contiguous).
    Keeps the values that are in the specified min/max range.
    NaNs are always filtered out.
    If the input is a Key type, the min/max are considered percentages of
    the number of values.

    :param columns: a string representing the column name to perform the
        transformation on.

        * Input column type: numeric.
        * Output column type: numeric.

        The << operator can be used to set this value (see
        `Column Operator </nimbusml/concepts/columns>`_)

        For example
         * RangeFilter(columns='age')
         * RangeFilter() << {'age'}

        For more details see `Columns </nimbusml/concepts/columns>`_.

    :param min: Minimum value (0 to 1 for key types).

    :param max: Maximum value (0 to 1 for key types).

    :param complement: If true, keep the values that fall outside the range.

    :param include_min: If true, include in the range the values that are
        equal to min.

    :param include_max: If true, include in the range the values that are
        equal to max.

    :param params: Additional arguments sent to compute engine.

    .. index:: transform, random

    Example:
       .. literalinclude:: /../nimbusml/examples/RangeFilter.py
              :language: python
    """

    @trace
    def __init__(
            self,
            min=-1,
            max=None,
            complement=False,
            include_min=True,
            include_max=None,
            columns=None,
            **params):

        if columns:
            params['columns'] = columns
        BaseTransform.__init__(self, **params)
        core.__init__(
            self,
            min=min,
            max=max,
            complement=complement,
            include_min=include_min,
            include_max=include_max,
            **params)
        self._columns = columns

    def get_params(self, deep=False):
        """
        Get the parameters for this operator.
        """
        return core.get_params(self)
