# --------------------------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License.
# --------------------------------------------------------------------------------------------
# - Generated by tools/entrypoint_compiler.py: do not edit by hand
"""
LpScaler
"""

__all__ = ["LpScaler"]


from sklearn.base import TransformerMixin

from ...base_transform import BaseTransform
from ...internal.core.preprocessing.normalization.lpscaler import \
    LpScaler as core
from ...internal.utils.utils import trace


class LpScaler(core, BaseTransform, TransformerMixin):
    """
    **Description**
        Normalize vectors (rows) individually by rescaling them to unit norm (L2, L1 or LInf). Performs the following operation on a vector X: Y = (X - M) / D, where M is mean and D is either L2 norm, L1 norm or LInf norm.

    :param columns: see `Columns </nimbusml/concepts/columns>`_.

    :param norm: The norm to use to normalize each sample.

    :param sub_mean: Subtract mean from each value before normalizing.

    :param params: Additional arguments sent to compute engine.

    """

    @trace
    def __init__(
            self,
            norm='L2',
            sub_mean=False,
            columns=None,
            **params):

        if columns:
            params['columns'] = columns
        BaseTransform.__init__(self, **params)
        core.__init__(
            self,
            norm=norm,
            sub_mean=sub_mean,
            **params)
        self._columns = columns

    def get_params(self, deep=False):
        """
        Get the parameters for this operator.
        """
        return core.get_params(self)

    def _nodes_with_presteps(self):
        """
        Inserts preprocessing before this one.
        """
        from ..schema import TypeConverter
        return [
            TypeConverter(
                result_type='R4')._steal_io(self),
            self]
