# --------------------------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License.
# --------------------------------------------------------------------------------------------
# - Generated by tools/entrypoint_compiler.py: do not edit by hand
"""
RobustScaler
"""

__all__ = ["RobustScaler"]


from sklearn.base import TransformerMixin

from ...base_transform import BaseTransform
from ...internal.core.preprocessing.normalization.robustscaler import \
    RobustScaler as core
from ...internal.utils.utils import trace


class RobustScaler(core, BaseTransform, TransformerMixin):
    """
    **Description**
        Removes the median and scales the data according to the quantile range.

    :param columns: see `Columns </nimbusml/concepts/columns>`_.

    :param center: If True, center the data before scaling.

    :param scale: If True, scale the data to interquartile range.

    :param quantile_min: Min for the quantile range used to calculate scale.

    :param quantile_max: Max for the quantile range used to calculate scale.

    :param params: Additional arguments sent to compute engine.

    """

    @trace
    def __init__(
            self,
            center=True,
            scale=True,
            quantile_min=25.0,
            quantile_max=75.0,
            columns=None,
            **params):

        if columns:
            params['columns'] = columns
        BaseTransform.__init__(self, **params)
        core.__init__(
            self,
            center=center,
            scale=scale,
            quantile_min=quantile_min,
            quantile_max=quantile_max,
            **params)
        self._columns = columns

    def get_params(self, deep=False):
        """
        Get the parameters for this operator.
        """
        return core.get_params(self)
