# --------------------------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License.
# --------------------------------------------------------------------------------------------
# - Generated by tools/entrypoint_compiler.py: do not edit by hand
"""
PcaTransformer
"""

__all__ = ["PcaTransformer"]


from sklearn.base import TransformerMixin

from ..base_transform import BaseTransform
from ..internal.core.decomposition.pcatransformer import PcaTransformer as core
from ..internal.utils.utils import trace


class PcaTransformer(core, BaseTransform, TransformerMixin):
    """

    Pca Transformer

    .. remarks::
        `Principle Component Analysis (PCA)
        <https://en.wikipedia.org/wiki/Principal_component_analysis>`_ is a
        dimensionality-reduction transform which computes the projection of
        the feature vector to onto a low-rank
        subspace. Its training is done using the technique described in the
        paper `Combining Structured and Unstructured
        Randomness in Large Scale PCA
        <https://arxiv.org/pdf/1310.6304v2.pdf>`_ by Nikos Karampatziakis and
        Paul
        Mineiro, and the paper `Finding Structure with Randomness:
        Probabilistic Algorithms for Constructing Approximate
        Matrix Decompositions <https://arxiv.org/pdf/0909.4061v2.pdf>`_ by N.
        Halko et al.

    :param weight: The PCA transform can take into account a weight for each
        row. To use weights, the input must contain
        a weight column, whose name is specified using this parameter. See
        `Columns </nimbusml/concepts/columns>`_ for syntax.

    :param columns: see `Columns </nimbusml/concepts/columns>`_.
         If users specify mutiple non-`Vector Type
         </nimbusml/concepts/types#vectortype-column>`_ columns
         as input, PCA
         will select n features (in total) from the selected columns.
         The output columns will be named after the first selected column
         followed by the slot number.
         Users can also apply PCA to a set of
         `Vector Type </nimbusml/concepts/types#vectortype-column>`_
         columns. In
         this case, PCA will applies to each of the columns,
         and this transform will generate n principle components for each of
         the column.

    :param rank: The number of components in the PCA. The default value is
        20.

    :param oversampling: Oversampling parameter for randomized PCA training.

    :param center: If enabled, data is centered to be zero mean.

    :param random_state: The seed for random number generation.

    :param params: Additional arguments sent to compute engine.

    .. seealso::
        :py:class:`PcaAnomalyDetector
        <nimbusml.decomposition.PcaAnomalyDetector>`.

    .. index:: normalize, preprocessing

    Example:
       .. literalinclude:: /../nimbusml/examples/PcaTransformer.py
              :language: python
    """

    @trace
    def __init__(
            self,
            rank=20,
            oversampling=20,
            center=True,
            random_state=0,
            weight=None,
            columns=None,
            **params):

        if 'example_weight_column_name' in params:
            raise NameError(
                "'example_weight_column_name' must be renamed to 'weight'")
        if weight:
            params['example_weight_column_name'] = weight
        if columns:
            params['columns'] = columns
        BaseTransform.__init__(self, **params)
        core.__init__(
            self,
            rank=rank,
            oversampling=oversampling,
            center=center,
            random_state=random_state,
            **params)
        self.weight = weight
        self._columns = columns

    def get_params(self, deep=False):
        """
        Get the parameters for this operator.
        """
        return core.get_params(self)

    def _nodes_with_presteps(self):
        """
        Inserts preprocessing before this one.
        """
        from ..preprocessing.schema import TypeConverter
        if isinstance(self._columns, dict):
            from copy import deepcopy
            self_copy = deepcopy(self)
            self_copy._columns = [
                y for x in self._columns.values() for y in x]
            return [
                TypeConverter(
                    result_type='R4')._steal_io(self_copy),
                self]
        return [
            TypeConverter(
                result_type='R4')._steal_io(self),
            self]
