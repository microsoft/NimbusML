# --------------------------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License.
# --------------------------------------------------------------------------------------------
# - Generated by tools/entrypoint_compiler.py: do not edit by hand
"""
SgdBinaryClassifier
"""

__all__ = ["SgdBinaryClassifier"]


from sklearn.base import ClassifierMixin

from ..base_predictor import BasePredictor
from ..internal.core.linear_model.sgdbinaryclassifier import \
    SgdBinaryClassifier as core
from ..internal.utils.utils import trace


class SgdBinaryClassifier(core, BasePredictor, ClassifierMixin):
    """

    Machine Learning Hogwild Stochastic Gradient Descent Binary
    Classifier

    .. remarks::
        The Stochastic Gradient Descent (SGD) is one of the most popular
        stochastic optimization procedure that can be integrated into several
        machine learning tasks to achieve state-of-the-art performance. The
        Hogwild SGD binary classification learner implements SGD for binary
        classification that supports multi-threading without any locking. If
        the
        associated optimization problem is sparse, then Hogwild SGD achieves
        a
        nearly optimal rate of convergence. For a detailed reference, please
        refer to `http://arxiv.org/pdf/1106.5730v2.pdf
        <http://arxiv.org/pdf/1106.5730v2.pdf>`_.


        **Reference**

            `http://arxiv.org/pdf/1106.5730v2.pdf
            <http://arxiv.org/pdf/1106.5730v2.pdf>`_


    :param feature: see `Columns </nimbusml/concepts/columns>`_.

    :param label: see `Columns </nimbusml/concepts/columns>`_.

    :param weight: see `Columns </nimbusml/concepts/columns>`_.

    :param normalize: Specifies the type of automatic normalization used:

        * ``"Auto"``: if normalization is needed, it is performed
          automatically. This is the default choice.
        * ``"No"``: no normalization is performed.
        * ``"Yes"``: normalization is performed.
        * ``"Warn"``: if normalization is needed, a warning
          message is displayed, but normalization is not performed.

        Normalization rescales disparate data ranges to a standard scale.
        Feature
        scaling insures the distances between data points are proportional
        and
        enables various optimization methods such as gradient descent to
        converge
        much faster. If normalization is performed, a ``MaxMin`` normalizer
        is
        used. It normalizes values in an interval [a, b] where ``-1 <= a <=
        0``
        and ``0 <= b <= 1`` and ``b - a = 1``. This normalizer preserves
        sparsity by mapping zero to zero.

    :param caching: Whether trainer should cache input training data.

    :param loss: The default is :py:class:`'log' <nimbusml.loss.Log>`. Other
        choices are :py:class:`'exp' <nimbusml.loss.Exp>`, :py:class:`'hinge'
        <nimbusml.loss.Hinge>`, and :py:class:`'smoothed_hinge'
        <nimbusml.loss.SmoothedHinge>`. For more information, please see the
        documentation page about losses, [Loss](xref:nimbusml.loss).

    :param l2_regularization: L2 Regularization constant.

    :param number_of_threads: Degree of lock-free parallelism. Defaults to
        automatic depending on data sparseness. Determinism not guaranteed.

    :param convergence_tolerance: Exponential moving averaged improvement
        tolerance for convergence.

    :param number_of_iterations: Maximum number of iterations; set to 1 to
        simulate online learning.

    :param initial_learning_rate: Initial learning rate (only used by SGD).

    :param shuffle: Shuffle data every epoch?.

    :param positive_instance_weight: Apply weight to the positive class, for
        imbalanced data.

    :param check_frequency: Convergence check frequency (in terms of number of
        iterations). Default equals number of threads.

    :param params: Additional arguments sent to compute engine.

    .. seealso::
        :py:func:`LogisticRegressionClassifier
        <nimbusml.linear_model.LogisticRegressionClassifier>`,
        :py:func:`AveragedPerceptronBinaryClassifier
        <nimbusml.linear_model.AveragedPerceptronBinaryClassifier>`

    .. index:: models, classification, stocastic, gradient, descent

    Example:
       .. literalinclude:: /../nimbusml/examples/SgdBinaryClassifier.py
              :language: python
    """

    @trace
    def __init__(
            self,
            normalize='Auto',
            caching='Auto',
            loss='log',
            l2_regularization=1e-06,
            number_of_threads=None,
            convergence_tolerance=0.0001,
            number_of_iterations=20,
            initial_learning_rate=0.01,
            shuffle=True,
            positive_instance_weight=1.0,
            check_frequency=None,
            feature=None,
            label=None,
            weight=None,
            **params):

        if 'feature_column_name' in params:
            raise NameError(
                "'feature_column_name' must be renamed to 'feature'")
        if feature:
            params['feature_column_name'] = feature
        if 'label_column_name' in params:
            raise NameError(
                "'label_column_name' must be renamed to 'label'")
        if label:
            params['label_column_name'] = label
        if 'example_weight_column_name' in params:
            raise NameError(
                "'example_weight_column_name' must be renamed to 'weight'")
        if weight:
            params['example_weight_column_name'] = weight
        BasePredictor.__init__(self, type='classifier', **params)
        core.__init__(
            self,
            normalize=normalize,
            caching=caching,
            loss=loss,
            l2_regularization=l2_regularization,
            number_of_threads=number_of_threads,
            convergence_tolerance=convergence_tolerance,
            number_of_iterations=number_of_iterations,
            initial_learning_rate=initial_learning_rate,
            shuffle=shuffle,
            positive_instance_weight=positive_instance_weight,
            check_frequency=check_frequency,
            **params)
        self.feature = feature
        self.label = label
        self.weight = weight

    @trace
    def predict_proba(self, X, **params):
        '''
        Returns probabilities
        '''
        return self._predict_proba(X, **params)

    @trace
    def decision_function(self, X, **params):
        '''
        Returns score values
        '''
        return self._decision_function(X, **params)

    def get_params(self, deep=False):
        """
        Get the parameters for this operator.
        """
        return core.get_params(self)
