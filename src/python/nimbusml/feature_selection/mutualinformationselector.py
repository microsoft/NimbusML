# --------------------------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License.
# --------------------------------------------------------------------------------------------
# - Generated by tools/entrypoint_compiler.py: do not edit by hand
"""
MutualInformationSelector
"""

__all__ = ["MutualInformationSelector"]


from sklearn.base import TransformerMixin

from ..base_transform import BaseTransform
from ..internal.core.feature_selection.mutualinformationselector import \
    MutualInformationSelector as core
from ..internal.utils.utils import trace


class MutualInformationSelector(
        core,
        BaseTransform,
        TransformerMixin):
    """
    Selects the top k features across all specified columns ordered by
    their mutual information with the label column.

    .. remarks::
        The mutual information of two random variables ``X`` and ``Y`` is a
        measure of the mutual dependence between the variables. Formally, the
        mutual information can be written as:

        ``I(X;Y) = E[log(p(x,y)) - log(p(x)) - log(p(y))]``

        where the expectation is taken over the joint distribution of ``X``
        and
        ``Y``. Here ``p(x,y)`` is the joint probability density function of
        ``X`` and ``Y``, ``p(x)`` and ``p(y)`` are the marginal
        probability density functions of ``X`` and ``Y`` respectively. In
        general, a higher mutual information between the dependent variable
        (or
        label) and an independent variable (or feature) means that the label
        has
        higher mutual dependence over that feature.

        The mutual information feature selection mode selects the features
        based on
        the mutual information. It keeps the top ``num_features_to_keep``
        features
        with the largest mutual information with the label.


        **Reference**

            `Wikipedia: Mutual Information
            <https://en.wikipedia.org/wiki/Mutual_information>`_


    :param label: see `Columns </nimbusml/concepts/columns>`_.

    :param columns: a string or a dictionary (map to a string), representing
        the column name to perform the transformation on.

        * Input column type: numeric or `Vector Type
         </nimbusml/concepts/types#vectortype-column>`_.
        * Output column type: numeric or `Vector Type
         </nimbusml/concepts/types#vectortype-column>`_.

        The << operator can be used to set this value (see
        `Columns </nimbusml/concepts/columns>`_).

        For example
         * MutualInformationSelector(columns='features')
         * MutualInformationSelector(columns={'features_sub':'features']})
         * MutualInformationSelector() << {'features':'features'}

         This transform only accepts **one** column as input, therefore,
        users are recommended to concatenate the target
        columns to one
        `Vector Type </nimbusml/concepts/types#vectortype-column>`_
        column (as in the following
        example) and specify the corresponding input/output column name.

    :param slots_in_output: The maximum number of slots to preserve in output.

    :param num_bins: Numeric (R4/R8) features are binned into discrete bins
        so that the mutual information can be
        computed. This argument controls the number of bins for numerical
        values. Powers of 2
        are recommended. The default value is 256.

    :param params: Additional arguments sent to compute engine.

    .. seealso::
        :py:class:`CountSelector <nimbusml.feature_selection.CountSelector>`

    .. index:: feature, selection, mutual, information

    Example:
       .. literalinclude:: /../nimbusml/examples/MutualInformationSelector.py
              :language: python
    """

    @trace
    def __init__(
            self,
            slots_in_output=1000,
            num_bins=256,
            label=None,
            columns=None,
            **params):

        if 'label_column_name' in params:
            raise NameError(
                "'label_column_name' must be renamed to 'label'")
        if label:
            params['label_column_name'] = label
        if columns:
            params['columns'] = columns
        BaseTransform.__init__(self, **params)
        core.__init__(
            self,
            slots_in_output=slots_in_output,
            num_bins=num_bins,
            **params)
        self.label = label
        self._columns = columns

    def get_params(self, deep=False):
        """
        Get the parameters for this operator.
        """
        return core.get_params(self)
