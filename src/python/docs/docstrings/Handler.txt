    """

    Replace NaN values in a column with imputed values.

    .. remarks::
        ``Handler`` is a combination of :py:class:`Filter
        <nimbusml.preprocessing.missing_values.Filter>` and :py:class:`Indicator
        <nimbusml.preprocessing.missing_values.Indicator>`. It creates two
        columns, one
        containing the imputed values as specified by ``replace_with``
        argument,
        and the second column containing indicator values of which rows
        entries
        were imputed. This works for columns that have numeric type.

    :param columns: a dictionary of key-value pairs, where key is the output
        column name and value is the input column name.

        * Multiple key-value pairs are allowed.
        * Input column type: numeric.
        * Output column type:
         `Vector Type </nimbusml/concepts/types#vectortype-column>`_.
        * If the output column names are same as the input column names, then
        simply specify ``columns`` as a list of strings.

        The << operator can be used to set this value (see
        `Column Operator </nimbusml/concepts/columns>`_)

        For example
         * Handler(columns={'out1':'input1', 'out2':'input2'})
         * Handler() << {'out1':'input1', 'out2':'input2'}

        For more details see `Columns </nimbusml/concepts/columns>`_.

    :param replace_with: The method to use to replace NaN values. The
        following choices are available.

        * Def: Replace with default value of that type, usually ``0``. If no
        replace method is specified, this is the default strategy.
        * Mean: Replace NaN values with the mean of the values in that column.
        * Min: Replace with minimum value in the column.
        * Max: Replace with maximum value in the column.

    .. seealso::
        :py:class:`Filter <nimbusml.preprocessing.missing_values.Filter>`,
        :py:class:`Indicator <nimbusml.preprocessing.missing_values.Indicator>`.

    .. index:: handler

    Example:
       .. literalinclude:: /../nimbusml/examples/Handler.py
              :language: python
    """
